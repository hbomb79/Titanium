--[[
    An Application object is the entry point to a Titanium Application.
    The program loop, nodes, threads and animations are handled by the Application object.
--]]

class Application extends Component mixin MThemeManager mixin MKeyHandler mixin MCallbackManager mixin MAnimationManager mixin MNodeContainer {
    width = 51;
    height = 19;

    threads = {};
    nodes = {};

    running = false;
    terminatable = false;
}

--[[
    @constructor
    @desc Constructs an instance of the Application by setting all necessary unique properties on it
    @param [number - width], [number - height]
    @return <nil>
]]
function Application:__init__( ... )
    self:resolve( ... )
    self.canvas = TermCanvas( self )

    self:setMetaMethod("add", function( a, b )
        local t = a ~= self and a or b

        if Titanium.typeOf( t, "Node", true ) then
            return self:addNode( t )
        elseif Titanium.typeOf( t, "Thread", true ) then
            return self:addThread( t )
        end

        error "Invalid targets for application '__add'. Expected node or thread."
    end)
end

function Application:focusNode( node )
    if not Titanium.typeOf( node, "Node", true ) then
        return error "Failed to update application focused node. Invalid node object passed."
    end

    self:unfocusNode()
    self.focusedNode = node
    node.changed = true


    node:executeCallbacks( "focus", self )
end

function Application:unfocusNode( targetNode )
    local node = self.focusedNode
    if not node or ( targetNode ~= node ) then return end

    self.focusedNode = nil

    node.raw.focused = false
    node.changed = true

    node:executeCallbacks( "unfocus", self )
end

--[[
    @instance
    @desc Adds a new thread named 'name' running 'func'. This thread will receive events caught by the Application engine
    @param <threadObj - Thread Instance>
    @return [threadObj | error]
]]
function Application:addThread( threadObj )
    if not Titanium.typeOf( threadObj, "Thread", true ) then
        error( "Failed to add thread, object '"..tostring( threadObj ).."' is invalid. Thread Instance required")
    end

    table.insert( self.threads, threadObj )

    return threadObj
end

--[[
    @instance
    @desc Removes the thread named 'name'*
    @param <Instance 'Thread'/string name - target>
    @return <boolean - success>, [node - removedThread**]

    *Note: In order for the thread to be removed its 'id' field must match the 'id' parameter.
    **Note: Removed thread will only be returned if a thread was removed (and thus success 'true')
]]
function Application:removeThread( target )
    if not Titanium.typeOf( target, "Thread", true ) then
        return error( "Cannot perform search for thread using target '"..tostring( target ).."'." )
    end

    local searchID = type( target ) == "string"
    local threads, thread, threadID = self.threads
    for i = 1, #threads do
        thread = threads[ i ]

        if ( searchID and thread.id == target ) or ( not searchID and thread == target ) then
            thread:stop()

            table.remove( threads, i )
            return true, thread
        end
    end

    return false
end

--[[
    @instance
    @desc Ships events to threads, if the thread requires a Titanium event, that will be passed instead.
    @param <AnyEvent - eventObj>, <vararg - eData>
]]
function Application:handleThreads( eventObj, ... )
    local threads = self.threads

    local thread
    for i = 1, #threads do
        thread = threads[ i ]

        if thread.titaniumEvents then
            thread:handle( eventObj )
        else
            thread:handle( ... )
        end
    end
end

--[[
    @instance
    @desc Begins the program loop
]]
function Application:start( preserve )
    if not preserve then
        Titanium.VFS = nil
    end

    self.running = true
    while self.running do
        self:draw()
        local event = { coroutine.yield() }
        local eName = event[ 1 ]

        if eName == "timer" and event[ 2 ] == self.timer then
            self:updateAnimations()
        elseif eName == "terminate" and self.terminatable then
            printError "Application Terminated"
            self:stop()
        end

        self:handle( unpack( event ) )
    end
end

--[[
    @instance
    @desc Draws changed nodes (or all nodes if 'force' is true)
    @param [boolean - force]
]]
function Application:draw( force )
    if not self.changed and not force then return end

    if self.needsThemeUpdate then
        self:update()
        self.needsThemeUpdate = false
    end

    local canvas = self.canvas
    local nodes, node = self.nodes

    for i = 1, #nodes do
        node = nodes[ i ]
        if node.needsRedraw and node.visible then
            node:draw( force )

            node.canvas:drawTo( canvas, node.X, node.Y )
            node.needsRedraw = false
        end
    end
    self.changed = false

    local focusedNode, caretEnabled, caretX, caretY, caretColour = self.focusedNode
    if focusedNode and focusedNode:can "getCaretInfo" then
        caretEnabled, caretX, caretY, caretColour = focusedNode:getCaretInfo()
    end

    term.setCursorBlink( caretEnabled or false )
    canvas:draw( force )

    if caretEnabled then
        term.setTextColour( caretColour or self.colour or 32768 )
        term.setCursorPos( caretX or 1, caretY or 1 )
    end
end

--[[
    @instance
    @desc Spawns a Titanium event instance and ships it to nodes and threads.
    @param <table - event>
]]
function Application:handle( eName, ... )
    local eventObject = Event.spawn( eName, ... )
    if eventObject.main == "KEY" then self:handleKey( eventObject ) end

    local nodes, node = self.nodes
    for i = #nodes, 1, -1 do
        node = nodes[ i ]
        -- The node will update itself depending on the event. Once all are updated they are drawn if changed.
        if node then node:handle( eventObject ) end
    end

    self:executeCallbacks( eName, eventObject )
    self:handleThreads( eventObject, eName, ... )
end

--[[
    @instance
    @desc Stops the program loop
]]
function Application:stop()
    if self.running then
        self.running = false
        os.queueEvent( "ti_app_close" )
    else
        return error "Application already stopped"
    end
end
