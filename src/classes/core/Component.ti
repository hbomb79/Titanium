--[[
    @instance width - number (def. 1) - The objects width, defines the width of the canvas.
    @instance height - number (def. 1) - The objects width, defines the height of the canvas.
    @instance X - number (def. 1) - The objects X position. Replaced when fluid positioning is used.
    @instance Y - number (def. 1) - The objects Y position. Replaced when fluid positioning is used.
    @instance changed - boolean (def. true) - If true, the node will be redrawn by it's parent. This propagates up to the application, before being drawn to the CraftOS term object. Set to false after draw.
    @instance backgroundChar - string (def. " ") - Defines the character used when redrawing the canvas. Can be set to "nil" to use no character at all.
    @instance positioning - string (def. "fluid") - The positioning type of the node -- used when the parent resolves fluid positions (when the parent has 'resolveFluid' set to true).
    @instance marginLeft - number (def. 0) - When the parent is resolving fluid positions, this value is used to calculate the amount of space to the left of the node (from the edge, or an adjacent node). marginLeft takes priority over marginRight.
    @instance marginRight - number (def. 0) - When the parent is resolving fluid positions, this value is used to calculate the amount of space to the right of node (from an adjacent node).
    @instance marginTop - number (def. 0) - When the parent is resolving fluid positions, this value is used to calculate the amount of space above the node (from an adjacent node, or the edge of the parent). marginTop takes priority over marginBottom.
    @instance marginBottom - number (def. 0) - When the parent is resolving fluid positions, this value is used to calculate the amount of space under the node (from an adjacent node).

    A Component is an object that can be represented visually.
]]

abstract class Component mixin MPropertyManager {
    width = 1;
    height = 1;

    X = 1;
    Y = 1;

    changed = true;

    backgroundChar = " ";

    shader = false;
    shadeText = true;
    shadeBackground = true;

    marginLeft = 0;
    marginRight = 0;
    marginTop = 0;
    marginBottom = 0;
    positioning = false;
}

--[[
    @constructor
    @desc Instantiates the Component instance and creates property watchers for 'shadeText', 'shadeBackground' and 'shader' to allow for more dynamic property assignment
]]
function Component:__init__()
    local shadeText, shadeBackground, shader = self.shadeText, self.shadeBackground, self.shader

    self.shadeText = shadeText == "true" and true or ( shadeText ~= "false" and shadeText ) or false
    self.shadeBackground = shadeBackground == "true" and true or ( shadeBackground ~= "false" and shadeBackground ) or false
    self.shader = shader == "true" and true or ( shader ~= "false" and shader ) or false

    local function fix( self, key, value ) return value == "true" and true or ( value ~= "false" and value ) or false end
    self:watchProperty( "shadeText", fix )
    self:watchProperty( "shadeBackground", fix )
    self:watchProperty( "shader", fix )
end

--[[
    @instance
    @desc Redraws the area that 'self' occupies inside it's parent
]]
function Component:queueAreaReset()
    local parent = self.parent
    if parent then
        parent:redrawArea( self.X, self.Y, self.width, self.height )
    end

    self.changed = true
end

--[[
    @instance
    @desc Accepts either a property, or a property-value table to set on the instance
    @param <string - property>, <any - value> - If setting just one property
    @param <table - properties> - Setting multiple properties, using format { property = value }
]]
function Component:set( properties, value )
    if type( properties ) == "string" then
        self[ properties ] = value
    elseif type( properties ) == "table" then
        for property, val in pairs( properties ) do
            self[ property ] = val
        end
    else return error "Expected table or string"end

    return self
end

--[[
    @setter
    @desc Resets the area the node previously occupied before moving the node's X position
    @param <number - X>
]]
function Component:setX( X )
    self:queueAreaReset()
    self.X = math.ceil( X )
end

--[[
    @setter
    @desc Resets the area the node previously occupied before moving the node's Y position
    @param <number - Y>
]]
function Component:setY( Y )
    self:queueAreaReset()
    self.Y = math.ceil( Y )
end

--[[
    @setter
    @desc Resets the area the node previously occupied before changing the nodes width
    @param <number - width>
]]
function Component:setWidth( width )
    if self.parent then self.parent.positionChanged = true end
    self:queueAreaReset()

    width = math.ceil( width )
    self.width = width
    self.canvas.width = width
end

--[[
    @setter
    @desc Resets the area the node previously occupied before changing the nodes height
    @param <number - height>
]]
function Component:setHeight( height )
    if self.parent then self.parent.positionChanged = true end
    self:queueAreaReset()

    height = math.ceil( height )
    self.height = height
    self.canvas.height = height
end

--[[
    @setter
    @desc Changes the colour of the canvas and the node, and queues a redraw
    @param <number - colour>
]]
function Component:setColour( colour )
    self.colour = colour
    self.canvas.colour = colour

    self.changed = true
end

--[[
    @setter
    @desc Changes the background colour of the canvas and the node, and queues a redraw
    @param <number - backgroundColour>
]]
function Component:setBackgroundColour( backgroundColour )
    self.backgroundColour = backgroundColour
    self.canvas.backgroundColour = backgroundColour

    self.changed = true
end

--[[
    @setter
    @desc Changes the transparency of the canvas and node, and queues a redraw
    @param <boolean - transparent>
]]
function Component:setTransparent( transparent )
    self.transparent = transparent
    self.canvas.transparent = transparent

    self.changed = true
end

--[[
    @setter
    @desc Changes the canvas and nodes background character, and queues a redraw
    @param <string - backgroundChar>
]]
function Component:setBackgroundChar( backgroundChar )
    if backgroundChar == "nil" then
        backgroundChar = nil
    end

    self.backgroundChar = backgroundChar
    self.canvas.backgroundChar = backgroundChar

    self.changed = true
end

--[[
    @setter
    @desc Changes the backgroundTextColour of the canvas and node, and queues a redraw
    @param <number - backgroundTextColour>
]]
function Component:setBackgroundTextColour( backgroundTextColour )
    self.backgroundTextColour = backgroundTextColour
    self.canvas.backgroundTextColour = backgroundTextColour

    self.changed = true
end

configureConstructor {
    orderedArguments = { "X", "Y", "width", "height" },
    argumentTypes = { X = "number", Y = "number", width = "number", height = "number", colour = "colour", backgroundColour = "colour", backgroundTextColour = "colour", transparent = "boolean", shader = "ANY", shadeText="ANY", shadeBackground="ANY", marginLeft = "number", marginRight = "number", marginTop = "number", marginBottom = "number", positioning = "ANY" }
} alias {
    color = "colour",
    backgroundColor = "backgroundColour"
}
