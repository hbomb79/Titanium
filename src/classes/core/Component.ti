--[[
    @instance width - number (def. 1) - The objects width, defines the width of the canvas.
    @instance height - number (def. 1) - The objects width, defines the height of the canvas.
    @instance X - number (def. 1) - The objects X position
    @instance Y - number (def. 1) - The objects Y position
    @instance changed - boolean (def. true) - If true, the node will be redrawn by it's parent. This propagates upto the application, before being drawn to the CraftOS term object. Set to false after draw.
    @instance backgroundChar - string (def. " ") - Defines the character used when redrawing the canvas. Can be set to "nil" to use no character at all.

    A Component is an object that can be respresented visually.
--]]

abstract class Component mixin MPropertyManager {
    width = 1;
    height = 1;
    X = 1;
    Y = 1;

    changed = true;

    backgroundChar = " ";
}

function Component:queueAreaReset()
    local parent = self.parent
    if parent then
        parent:redrawArea( self.X, self.Y, self.width, self.height )
    end

    self.changed = true
end

function Component:set( tbl )
    if type( tbl ) ~= "table" then
        return error "Table expected"
    end

    for property, value in pairs( tbl ) do
        self[ property ] = value
    end

    return self
end

function Component:setX( X )
    self:queueAreaReset()
    self.X = X
end

function Component:setY( Y )
    self:queueAreaReset()
    self.Y = Y
end

function Component:setWidth( width )
    self:queueAreaReset()

    self.width = width
    self.canvas.width = width
end

function Component:setHeight( height )
    self:queueAreaReset()

    self.height = height
    self.canvas.height = height
end

function Component:setColour( colour )
    self.colour = colour
    self.canvas.colour = colour

    self.changed = true
end

function Component:setBackgroundColour( backgroundColour )
    self.backgroundColour = backgroundColour
    self.canvas.backgroundColour = backgroundColour

    self.changed = true
end

function Component:setTransparent( transparent )
    self.transparent = transparent
    self.canvas.transparent = transparent

    self.changed = true
end

function Component:setBackgroundChar( backgroundChar )
    if backgroundChar == "nil" then
        backgroundChar = nil
    end

    self.backgroundChar = backgroundChar
    self.canvas.backgroundChar = backgroundChar

    self.changed = true
end

function Component:setBackgroundTextColour( backgroundTextColour )
    self.backgroundTextColour = backgroundTextColour
    self.canvas.backgroundTextColour = backgroundTextColour

    self.changed = true
end

configureConstructor {
    orderedArguments = { "X", "Y", "width", "height" },
    argumentTypes = { X = "number", Y = "number", width = "number", height = "number", colour = "colour", backgroundColour = "colour", backgroundTextColour = "colour", transparent = "boolean" }
} alias {
    color = "colour",
    backgroundColor = "backgroundColour"
}
