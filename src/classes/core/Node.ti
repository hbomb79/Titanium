--[[
    @static eventMatrix - table (def. {}) - Contains the event -> function name matrix. If an event name is found in the keys, the value is used as the function to call on the instance (otherwise, 'onEvent' is called)
    @static anyMatrix - table (def. {}) - Only used when 'useAnyCallbacks' is true. If a key matching the 'main' key of the event instance is found, it's value is called (ie: MOUSE -> onMouse)

    @instance Z - number (def. 1) - The nodes Z index. Objects with higher z indexes appear above others.
    @instance enabled - boolean (def. true) - When 'true', node may receive events
    @instance parentEnabled - boolean (def. true) - When 'true', the parent of this node is enabled
    @instance visible - boolean (def. true) - When 'true', node is drawn to parent canvas
    @instance allowMouse - boolean (def. false) - If 'false', mouse events shipped to this node are ignored
    @instance allowKey - boolean (def. false) - If 'false', key events shipped to this node are ignored
    @instance allowChar - boolean (def. false) - If 'false', key events that have a character (ie: 'a', 'b' and 'c', but not 'delete') shipped to this node are ignored
    @instance useAnyCallbacks - boolean (def. false) - If 'true', events shipped to this node are handled through the static 'anyMatrix'
    @instance disabledColour - colour (def. 128) - When the node is disabled (enabled 'false'), this colour should be used to draw the foreground
    @instance disabledBackgroundColour - colour (def. 256) - When the node is disabled (enabled 'false'), this colour should be used to draw the background
    @instance needsRedraw - boolean (def. true) - If true, the contents of the nodes canvas will be blit onto the parents canvas without redrawing the nodes canvas contents, unlike 'changed', which does both
    @instance consumeWhenDisabled - boolean (def. true) - When true, mouse events that collide with this node while it is disabled will be consumed (handled = true). Non-mouse events are unaffected by this property

    A Node is an object which makes up the applications graphical user interface (GUI).

    Objects such as labels, buttons and text inputs are nodes.
]]

abstract class Node extends Component mixin MThemeable mixin MCallbackManager mixin MProjectable {
    static = {
        eventMatrix = {
            mouse_click = "onMouseClick",
            mouse_drag = "onMouseDrag",
            mouse_up = "onMouseUp",
            mouse_scroll = "onMouseScroll",

            key = "onKeyDown",
            key_up = "onKeyUp",
            char = "onChar"
        },
        anyMatrix = {
            MOUSE = "onMouse",
            KEY = "onKey"
        }
    };

    disabledColour = 128;
    disabledBackgroundColour = 256;

    allowMouse = false;
    allowKey = false;
    allowChar = false;
    useAnyCallbacks = false;

    enabled = true;
    parentEnabled = true;

    visible = true;

    needsRedraw = true;
    parent = false;

    consumeWhenDisabled = true;

    Z = 1;
}

--[[
    @constructor
    @desc Creates a NodeCanvas (bound to self) and stores it inside of `self.canvas`. This canvas is drawn to the parents canvas at draw time.
]]
function Node:__init__()
    self:register( "X", "Y", "colour", "backgroundColour", "enabled", "visible", "disabledColour", "disabledBackgroundColour" )
    self:super()

    if not self.canvas then self.raw.canvas = NodeCanvas( self ) end
end

--[[
    @constructor
    @desc Finishes construction by hooking the theme manager into the node.
]]
function Node:__postInit__()
    self:hook()
end

--[[
    @instance
    @desc Removes the node from it's parent (if it has one). Do note, this doesn't destroy the instance (allowing it to be added to a different parent later).
]]
function Node:remove()
    if not self.parent then return end

    self.parent:removeNode( self )
end

--[[
    @setter
    @desc Sets 'parentEnabled' and sets 'changed' to true
    @param <boolean - parentEnabled>
]]
function Node:setParentEnabled( parentEnabled )
    self.parentEnabled = parentEnabled
    self.changed = true
end

--[[
    @setter
    @desc Sets 'needsRedraw'. If the node now needs a redraw, it's parent (if any) will also have it's 'needsRedraw' property set to true
    @param <boolean - needsRedraw>
]]
function Node:setNeedsRedraw( needsRedraw )
    self.needsRedraw = needsRedraw

    if needsRedraw and self.parent then self.parent.needsRedraw = needsRedraw end
end

--[[
    @setter
    @desc Sets the enabled property of the node to 'enabled'. Sets node's 'changed' to true.
    @param <boolean - enabled>
]]
function Node:setEnabled( enabled )
    self.enabled = enabled
    self.changed = true
end

--[[
    @getter
    @desc Returns 'enabled', unless the parent is not enabled, in which case 'false' is returned
    @return <boolean - enabled>
]]
function Node:getEnabled()
    if not self.parentEnabled then
        return false
    end

    return self.enabled
end

--[[
    @setter
    @desc Sets 'parent' and sets the nodes 'changed' to true. If the node has a parent (ie: didn't set parent to false) the 'parentEnabled' property will be updated to match the parents 'enabled'
    @param <MNodeContainer Instance - parent> - If a parent exists, this line is used
    @param <boolean - parent> - If no parent exists, this line is used (false)
]]
function Node:setParent( parent )
    self.parent = parent
    self.changed = true

    if parent then
        self.parentEnabled = Titanium.typeOf( parent, "Application" ) or parent.enabled
        self:resolveProjector()
    end
end

--[[
    @setter
    @desc Sets the node to visible/invisible depending on 'visible' parameter
    @param <boolean - visible>
]]
function Node:setVisible( visible )
    self.visible = visible
    self.changed = true
    if not visible then
        self:queueAreaReset()
    end
end

--[[
    @setter
    @desc Sets the application of the node, and updates any attached projectors
    @param <Application Instance - application>
]]
function Node:setApplication( application )
    if self.application then
        self.parent:removeNode( self )
    end

    self.application = application
    self:resolveProjector()

    self:refreshDynamicValues()

    self.changed = true
end

--[[
    @setter
    @desc Sets the changed state of this node to 'changed'. If 'changed' then the parents of this node will also have changed set to true.
    @param <boolean - changed>
]]
function Node:setChanged( changed )
    self.changed = changed

    if changed then
        local parent = self.parent
        if parent then
            if not parent.changed then
                parent.changed = true
            end

            -- Perform intersection checks with this node and any siblings (ie: parent.nodes)
            local nodes, node = parent.nodes
            if nodes then
                local boundaryX1, boundaryY1 = self.X, self.Y
                local boundaryX2, boundaryY2 = boundaryX1 + self.width, boundaryY1 + self.height
                local Z = self.Z
                for i = 1, #nodes do
                    node = nodes[ i ]

                    if node ~= self and not node.needsRedraw and node.Z >= Z and not ( node.X + node.width - 1 < boundaryX1 or node.X > boundaryX2 or node.Y + node.height - 1 < boundaryY1 or node.Y > boundaryY2 ) then
                        node.needsRedraw = true
                    end
                end
            end
        end

        self.needsRedraw = true
    end
end

--[[
    @instance
    @desc Handles events by triggering methods on the node depending on the event object passed
    @param <Event Instance* - eventObj>
    @return <boolean - propagate>

    *Note: The event instance passed can be of variable type, ideally it extends 'Event' so that required methods are implemented on the eventObj.
]]
function Node:handle( eventObj )
    local main, sub, within = eventObj.main, eventObj.sub, false
    local handled, enabled = eventObj.handled, self.enabled

    if self.projector then
        self.resolvedProjector:handleEvent( eventObj )

        if not self.mirrorProjector and not eventObj.projectorOrigin then
            return
        end
    end

    if main == "MOUSE" then
        if self.allowMouse then
            within = eventObj.isWithin and eventObj:withinParent( self ) or false

            if within and not enabled and self.consumeWhenDisabled then eventObj.handled = true end
        else return end
    elseif ( main == "KEY" and not self.allowKey ) or ( main == "CHAR" and not self.allowChar ) then
        return
    end

    if not enabled then return end

    local fn = Node.eventMatrix[ eventObj.name ] or "onEvent"
    if self:can( fn ) then
        self[ fn ]( self, eventObj, handled, within )
    end

    if self.useAnyCallbacks then
        local anyFn = Node.anyMatrix[ main ]
        if self:can( anyFn ) then
            self[ anyFn ]( self, eventObj, handled, within )
        end
    end

    return true
end

--[[
    @instance
    @desc Returns the absolute X, Y position of a node rather than its position relative to it's parent (limited to 'limit')
    @param [Node Instance - limit]
    @return <number - X>, <number - Y>
]]
function Node:getAbsolutePosition( limit )
    local parent = self.parent
    if parent then
        if limit and parent == limit then
            return -1 + parent.X + self.X, -1 + parent.Y + self.Y
        end

        local pX, pY = self.parent:getAbsolutePosition()
        return -1 + pX + self.X, -1 + pY + self.Y
    else return self.X, self.Y end
end

--[[
    @instance
    @desc A shortcut method to quickly create a Tween instance and add it to the applications animations
    @return <Tween Instance - animation> - If an application is set, the animation created is returned
    @return <boolean - false> - If no application is set, false is returned
]]
function Node:animate( ... )
    if not self.application then return end

    return self.application:addAnimation( Tween( self, ... ) )
end

--[[
    @instance
    @desc Reorders the node inside the parents 'nodes' table depending on the nodes 'Z' position.
]]
function Node:updateZ()
    if not self.parent then return end
    local nodes, targetZ = self.parent.nodes, self.Z

    for i = 1, #nodes do
        if nodes[ i ] == self then
            while true do
                local before, after = nodes[ i - 1 ], nodes[ i + 1 ]

                if before and before.Z > targetZ then
                    nodes[ i ], nodes[ i - 1 ] = nodes[ i - 1 ], self
                    i = i - 1
                elseif after and after.Z < targetZ then
                    nodes[ i ], nodes[ i + 1 ] = nodes[ i + 1 ], self
                    i = i + 1
                else break end
            end

            self.changed = true
            break
        end
    end
end

--[[
    @setter
    @desc Changes the z index of the node, and updates the z position (:updateZ)
    @param <number - Z>
]]
function Node:setZ( Z )
    self.Z = Z
    self:updateZ()
end

configureConstructor {
    argumentTypes = { enabled = "boolean", visible = "boolean", disabledColour = "colour", disabledBackgroundColour = "colour", consumeWhenDisabled = "boolean", Z = "number"; allowMouse = "boolean"; allowChar = "boolean"; allowKey = "boolean" }
}
