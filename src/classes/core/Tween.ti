--[[
    @static easing - table (def. {}) - If a string is provided as the easing during instantiation, instead of a function, the easing function is searched for inside this table

    @instance object - Instance (def. false) - The Titanium instance on which the target property will be animated
    @instance property - string (def. false) - The target property that will be animated on the object
    @instance initial - number (def. false) - The initial value of the property. Automatically set during instantiation
    @instance final - number (def. false) - The target value for the property
    @instance duration - number (def. 0) - The amount of time the animation will take to animate the property from 'initial' to 'final'
    @instance clock - number (def. 0) - How far through the animation the instance is
    @instance easing - function (def. nil) - The easing function to be used during the animation

    The Tween class is Titaniums animation class (tween meaning in between values (from -> to)). However, Tween should not be used
    to create animations, using :animate (on supporting instances, like any child class of 'Node') is preferred.

    When animating, an easing can be set. If this easing is a string, it is searched for in 'Tween.static.easing'. All easing functions
    shipped with Titanium are automatically imported via the Titanium starting script (src/scripts/Titanium.lua). Custom easing
    functions can be created using the static function Tween.static.addEasing, or by manually adding them to the static 'easing' table.
]]

class Tween {
    static = {
        easing = {}
    };

    object = false;

    property = false;
    initial = false;
    final = false;

    duration = 0;
    clock = 0;
}

--[[
    @constructor
    @desc Constructs the tween instance, converting the 'easing' property into a function (if it's a string) and also stores the initial value of the property for later use.
    @param <Object - object>, <string - name>, <string - property>, <number - final>, <number - duration>, [string/function - easing]
]]
function Tween:__init__( ... )
    self:resolve( ... )
    if not Titanium.isInstance( self.object ) then
        return error("Argument 'object' for tween must be a Titanium instance. '"..tostring( self.object ).."' is not a Titanium instance.")
    end

    local easing = self.easing or "linear"
    if type( easing ) == "string" then
        self.easing = Tween.static.easing[ easing ] or error("Easing type '"..tostring( easing ).."' could not be found in 'Tween.static.easing'.")
    elseif type( easing ) == "function" then
        self.easing = easing
    else
        return error "Tween easing invalid. Must be a function to be invoked or name of easing type"
    end

    self.initial = self.object[ self.property ]
    self.clock = 0
end

--[[
    @instance
    @desc Sets the 'property' of 'object' to the rounded (down) result of the easing function selected. Passes the current clock time, the initial value, the difference between the initial and final values and the total Tween duration.
]]
function Tween:performEasing()
    self.object[ self.property ] = math.floor( self.easing( self.clock, self.initial, self.final - self.initial, self.duration ) + .5 )
end

--[[
    @instance
    @desc Updates the tween by increasing 'clock' by 'dt' via the setter 'setClock'
    @param <number - dt>
    @return <boolean - finished>
]]
function Tween:update( dt )
    return self:setClock( self.clock + dt )
end

--[[
    @instance
    @desc Sets the clock time to zero
    @param <boolean - finished>
]]
function Tween:reset()
    return self:setClock( 0 )
end

--[[
    @setter
    @desc Sets the current 'clock'. If the clock is a boundary number, it is adjusted to match the boundary - otherwise it is set as is. Once set, 'performEasing' is called and the state of the Tween (finished or not) is returned
    @param <number - clock>
    @return <boolean - finished>
]]
function Tween:setClock( clock )
    if clock <= 0 then
        self.clock = 0
    elseif clock >= self.duration then
        self.clock = self.duration
    else
        self.clock = clock
    end

    self:performEasing()
    return self.clock >= self.duration
end

--[[
    @static
    @desc Binds the function 'easingFunction' to 'easingName'. Whenever an animation that uses easing of type 'easingName' is updated, this function will be called to calculate the value
    @param <string - easingName>, <function - easingFunction>
    @return <Class Base - Tween>
]]
function Tween.static.addEasing( easingName, easingFunction )
    if type( easingFunction ) ~= "function" then
        return error "Easing function must be of type 'function'"
    end

    Tween.static.easing[ easingName ] = easingFunction
    return Tween
end

configureConstructor {
    orderedArguments = { "object", "name", "property", "final", "duration", "easing", "promise" },
    requiredArguments = { "object", "name", "property", "final", "duration" },
    argumentTypes = {
        name = "string",
        property = "string",
        final = "number",
        duration = "number",
        promise = "function"
    }
}
