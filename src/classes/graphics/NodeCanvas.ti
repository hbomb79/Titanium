local string_sub = string.sub

--[[
    The NodeCanvas is an object that allows classes to draw to their canvas using functions that are useful when drawing 'nodes', hence the name.

    The NodeCanvas should only be used by high-level objects (Nodes). Low level objects, such as 'Application' that require the ability to draw to the CraftOS terminal object
    should be using TermCanvas instead.
]]

class NodeCanvas extends Canvas

--[[
    @instance
    @desc Draws a single pixel using the arguments given. Char must only be one character long (hence the name).

          Foreground and background colours will fallback to the canvas colour and backgroundColour (respectively) if not provided.
    @param <number - x>, <number - y>, <string - char>, [number - tc], [number - bg]
]]
function NodeCanvas:drawPoint( x, y, char, tc, bg )
    if #char > 1 then return error "drawPoint can only draw one character" end

    self.buffer[ ( self.width * ( y - 1 ) ) + x ] = { char, tc or self.colour, bg or self.backgroundColour }
end

--[[
    @instance
    @desc Draws a line of text starting at the position given.

          Foreground and background colours will fallback to the canvas colour and backgroundColour (respectively) if not provided.
    @param <number - x>, <number - y>, <stringh - text>, [number - tc], [number - bg]
]]
function NodeCanvas:drawTextLine( x, y, text, tc, bg )
    local tc, bg = tc or self.colour, bg or self.backgroundColour

    local buffer, start = self.buffer, ( self.width * ( y - 1 ) ) + x
    for i = 1, #text do
        buffer[ -1 + start + i ] = { string_sub( text, i, i ), tc, bg }
    end
end

--[[
    @instance
    @desc Draws a rectangle, with it's upper left corner being dictated by the x and y positions given

          If not provided, 'col' will fallback to the backgroundColour of the canvas.
    @param <number - x>, <number - y>, <number - width>, <number - height>, [number - col], [string - char]
]]
function NodeCanvas:drawBox( x, y, width, height, col, char, textColour )
    local tc, bg = textColour or self.colour, col or self.backgroundColour
    local buffer = self.buffer

    local px = { char or " ", tc, bg }
    for y = math.max( 0, y ), y + height - 1 do
        for x = math.max( 1, x ), x + width - 1 do
            buffer[ ( self.width * ( y - 1 ) ) + x ] = px
        end
    end
end
