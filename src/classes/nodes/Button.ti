--[[
    @instance buttonLock - number (def. 1) - If 1 or 2, only mouse events with that button code will be handled. If 0, any mouse events will be handled

    A Button is a node that can be clicked to trigger a callback.
    The button can contain text which can span multiple lines, however if too much text is entered it will be truncated to fit the button dimensions.

    When the Button is clicked, the 'trigger' callback will be executed.
]]

class Button extends Node mixin MTextDisplay mixin MActivatable {
    allowMouse = true;
    buttonLock = 1;
}

--[[
    @constructor
    @desc Accepts button arguments and resolves them.
    @param <string - text>, [number - X], [number - Y], [number - width], [number - height]
]]
function Button:__init__( ... )
    self:resolve( ... )
    self:super()

    self:register("width", "height", "buttonLock")
end

--[[
    @instance
    @desc Sets the button to 'active' when the button is clicked with the valid mouse button (self.buttonLock)
    @param <MouseEvent Instance - event>, <boolean - handled>, <boolean - within>
]]
function Button:onMouseClick( event, handled, within )
    if not handled and within and ( self.buttonLock == 0 or event.button == self.buttonLock ) then
        self.active, event.handled = true, true
    end
end

--[[
    @instance
    @desc Sets the button to inactive when the mouse button is released. If released on button while active 'onTrigger' callback is fired.
    @param <MouseEvent Instance - event>, <boolean - handled>, <boolean - within>
]]
function Button:onMouseUp( event, handled, within )
    if within and not handled and self.active then
        event.handled = true
        self:executeCallbacks "trigger"
    end

    self.active = false
end

--[[
    @instance
    @desc Draws the text to the node canvas
    @param [boolean - force]
]]
function Button:draw( force )
    local raw = self.raw
    if raw.changed or force then
        local tc, bg
        if not self.enabled then
            bg, tc = raw.disabledBackgroundColour, raw.disabledColour
        elseif self.active then
            bg, tc = raw.activeBackgroundColour, raw.activeColour
        end

        raw.canvas:clear( bg )
        self:drawText( bg, tc )

        raw.changed = false
    end
end

--[[
    @setter
    @desc Sets the text of the button and then wraps the new text for display.
    @param <string - text>
]]
function Button:setText( text )
    if self.text == text then return end

    self.text = text
    self.changed = true
    self:wrapText()
end

--[[
    @setter
    @desc Sets the width of the button and then re-wraps the text to fit in the dimensions.
    @param <number - width>
]]
function Button:setWidth( width )
    self.super:setWidth( width )
    self:wrapText()
end

configureConstructor {
    orderedArguments = { "text" },
    requiredArguments = { "text" },
    argumentTypes = {
        buttonLock = "number"
    }
}
