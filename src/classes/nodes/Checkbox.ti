--[[
    @instance checkedMark - string (def. "x") - The single character used when the checkbox is checked
    @instance uncheckedMark - string (def. " ") - The single character used when the checkbox is not checked

    The checkbox is a node that can be toggled on and off.

    When the checkbox is toggled, the 'toggle' callback will be fired due to mixing in MTogglable
]]

class Checkbox extends Node mixin MActivatable mixin MTogglable {
    checkedMark = "x";
    uncheckedMark = " ";

    allowMouse = true;
}

--[[
    @constructor
    @desc Resolves arguments and calls super constructor
    @param <number - X>, <number - Y>
]]
function Checkbox:__init__( ... )
    self:resolve( ... )
    self:super()

    self:register("checkedMark", "uncheckedMark")
end

--[[
    @instance
    @desc Sets the checkbox to 'active' when clicked
    @param <MouseEvent Instance - event>, <boolean - handled>, <boolean - within>
]]
function Checkbox:onMouseClick( event, handled, within )
    if not handled then
        self.active = within

        if within then
            event.handled = true
        end
    end
end

--[[
    @instance
    @desc Sets the checkbox to inactive when the mouse button is released. If released on checkbox while active 'onToggle' callback is fired and the checkbox is toggled.
    @param <MouseEvent Instance - event>, <boolean - handled>, <boolean - within>
]]
function Checkbox:onMouseUp( event, handled, within )
    if not handled and within and self.active then
        self:toggle( event, handled, within )

        event.handled = true
    end

    self.active = false
end

--[[
    @instance
    @desc If a label which specifies this node as its 'labelFor' parameter is clicked this function will be called, causing the checkbox to toggle
    @param <Label Instance - label>, <MouseEvent - event>, <boolean - handled>, <boolean - within>
]]
function Checkbox:onLabelClicked( label, event, handled, within )
    self:toggle( event, handled, within, label )
    event.handled = true
end

--[[
    @instance
    @desc Draws the checkbox to the canvas
    @param [boolean - force]
]]
function Checkbox:draw( force )
    local raw = self.raw
    if raw.changed or force then
        local toggled, tc, bg = self.toggled
        if not self.enabled then
            tc, bg = raw.disabledColour, raw.disabledBackgroundColour
        elseif self.active then
            tc, bg = raw.activeColour, raw.activeBackgroundColour
        elseif toggled then
            tc, bg = raw.toggledColour, raw.toggledBackgroundColour
        end

        raw.canvas:drawPoint( 1, 1, toggled and raw.checkedMark or raw.uncheckedMark, tc, bg )
        raw.changed = false
    end
end

configureConstructor( {
    orderedArguments = { "X", "Y" },
    argumentTypes = {
        checkedMark = "string",
        uncheckedMark = "string"
    }
}, true, true )
