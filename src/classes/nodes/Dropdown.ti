class Dropdown extends Container {
    maxHeight = false;

    prompt = "Please select";
    horizontalAlign = "left";

    openIndicator = " \31";
    closedIndicator = " \16";

    backgroundColour = colours.lightBlue;
    colour = colours.white;

    activeBackgroundColour = colours.cyan;

    selectedColour = colours.white;
    selectedBackgroundColour = colours.grey;
    selectedOption = false;
    options = {};
}

function Dropdown:__init__( ... )
    self:super( ... )

    self.optionDisplay = self:addNode( Button "":linkProperties( self, "horizontalAlign", "disabledColour", "disabledBackgroundColour", "activeColour", "activeBackgroundColour" ):on("trigger", function() self:toggleOptionDisplay() end) )
    self.optionContainer = self:addNode( ScrollContainer( 1, 2, self.width ):set{ xScrollAllowed = false } )

    self:closeOptionDisplay()

    self.transparent = true
    self.consumeAll = false
end

function Dropdown:closeOptionDisplay()
    local cont = self.optionContainer
    cont.visible, cont.enabled = false, false

    self:queueAreaReset()
    self:updateDisplayButton()
end

function Dropdown:openOptionDisplay()
    local cont = self.optionContainer
    cont.visible, cont.enabled = true, true

    self:queueAreaReset()
    self:updateDisplayButton()
end

function Dropdown:toggleOptionDisplay()
    if self.optionContainer.visible then
        self:closeOptionDisplay()
    else
        self:openOptionDisplay()
    end
end

function Dropdown:setEnabled( enabled )
    self.super:setEnabled( enabled )
    if not enabled then
        self:closeOptionDisplay()
    end
end

function Dropdown:updateDisplayButton()
    self.optionDisplay.text = ( type( self.selectedOption ) == "table" and self.selectedOption[ 1 ] or self.prompt ) .. ( self.optionContainer.visible and self.openIndicator or self.closedIndicator )
    self.optionDisplay.width = #self.optionDisplay.text

    self.optionDisplay:set {
        colour = self.selectedColour,
        backgroundColour = self.selectedBackgroundColour
    }
end

function Dropdown:updateOptions()
    local cont = self.optionContainer
    cont:clearNodes()

    self:updateDisplayButton()

    local options = self.options
    for i = 1, #options do
        local option = options[ i ][ 1 ]
        if options[ i ] ~= self.selectedOption then
            cont:addNode(Button( option, 1, #cont.nodes + 1, self.width ):on("trigger", function( this )
                self.selectedOption = options[ i ]
            end):linkProperties( self, "colour", "activeColour", "disabledColour", "backgroundColour", "activeBackgroundColour", "disabledBackgroundColour", "horizontalAlign" ))
        end
    end

    local count = #cont.nodes
    if self.maxHeight then
        cont.height, self.height = math.min( count, self.maxHeight - 1 ), math.min( count + 1, self.maxHeight )
    else
        cont.height, self.height = count, count + 1
    end

    if #options > 0 then cont.yScroll = math.min( cont.yScroll, count ) end
end

function Dropdown:getSelectedValue()
    if type( self.selectedOption ) ~= "table" then return end

    return self.selectedOption[ 2 ]
end

function Dropdown:addOption( option, value )
    if type( option ) ~= "string" or value == nil then
        return error "Failed to add option to Dropdown node. Expected two arguments: string, val - where val is not nil"
    end

    self:removeOption( option )
    table.insert( self.options, { option, value } )

    self:updateOptions()
end

function Dropdown:removeOption( option )
    local options = self.options
    for i = #options, 1, -1 do
        if options[ i ] == option then
            table.remove( options, i )
        end
    end

    self:updateOptions()
end

function Dropdown:setPrompt( prompt )
    self.prompt = prompt
    self.optionDisplay.text = prompt
end

function Dropdown:setSelectedOption( selected )
    self.selectedOption = selected
    self:closeOptionDisplay()
    self:updateOptions()

    self:executeCallbacks( "change", selected )
end

function Dropdown:handle( eventObj )
    if not self.super:handle( eventObj ) then return end

    if eventObj:is "mouse_click" and not self:isMouseColliding( eventObj ) and self.optionContainer.visible then
        self:closeOptionDisplay()
        eventObj.handled = true
    end

    return true
end

function Dropdown:addTMLObject( TMLObj )
    if TMLObj.type == "Option" then
        if TMLObj.content and TMLObj.arguments.value then
            self:addOption( TMLObj.content, TMLObj.arguments.value )
        else
            error "Failed to add TML object to Dropdown object. 'Option' tag must include content (not children) and a 'value' argument"
        end
    else
        error( "Failed to add TML object to Dropdown object. Only 'Option' tags are accepted, '" .. tostring( TMLObj.type ) .. "' is invalid" )
    end
end

configureConstructor({
    orderedArguments = { "X", "Y", "width", "maxHeight", "prompt" },
    argumentTypes = {
        maxHeight = "number",
        prompt = "string"
    }
}, true)
