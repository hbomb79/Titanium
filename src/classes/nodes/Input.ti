--[[
    @instance position - number (def. 0) - The position of the caret, dictates the position new characters are added
    @instance scroll - number (def. 0) - The scroll position of the input, used when the content is longer than the width of the node
    @instance value - string (def. "") - The value currently held by the input
    @instance selection - number, boolean (def. false) - If a number, the end of the selection. If false, no selection made
    @instance selectedColour - colour (def. false) - The colour of selected text
    @instance selectedBackgroundColour - colour (def. false) - The background colour of selected text
    @instance placeholder - string (def. false) - The text displayed when the input is unfocused and has no value
    @instance placeholderColour - colour (def. 256) - The colour used when displaying the placeholder text
    @instance limit - number (def. 0) - If greater than 0, the amount of text entered will be limited to that number. If 0, no limit is set.
    @instance mask - string (def. "") - If not set to "", the character will be used instead of the characters displayed at draw time. Doesn't affect the actual value, only how it is displayed (ie: password forms)

    When the text is changed, the 'change' callback is executed. When the 'enter' key is pressed, the 'trigger' callback will be executed.

    The Input class provides the user with the ability to insert a single line of text, see EditableTextContainer for multi-line text input.
]]

local stringRep, stringSub = string.rep, string.sub
class Input extends Node mixin MActivatable mixin MFocusable {
    position = 0;
    scroll = 0;
    value = "";

    selection = false;
    selectedColour = false;
    selectedBackgroundColour = colours.lightBlue;

    placeholder = false;
    placeholderColour = 256;

    allowMouse = true;
    allowKey = true;
    allowChar = true;

    limit = 0;
    mask = "";
}

--[[
    @constructor
    @desc Constructs the instance by resolving arguments and registering used properties
]]
function Input:__init__( ... )
    self:resolve( ... )
    self:register( "width", "selectedColour", "selectedBackgroundColour", "limit" )

    self:super()
end

--[[
    @instance
    @desc Sets the input to active if clicked on, sets active and focused to false if the mouse click was not on the input.
    @param <MouseEvent Instance - event>, <boolean - handled>, <boolean - within>
]]
function Input:onMouseClick( event, handled, within )
    if within and not handled then
        if event.button ~= 1 then return end
        if self.focused then
            local application, pos, width, scroll = self.application, self.position, self.width, self.scroll
            local clickedPos = math.min( #self.value, event.X - self.X + self.scroll )

            if application:isPressed( keys.leftShift ) or application:isPressed( keys.rightShift ) then
                if clickedPos ~= pos then
                    self.selection = clickedPos
                else self.selection = false end
            else self.position, self.selection = clickedPos, false end
        end

        self.active, event.handled = true, true
    else
        self.active = false
        self:unfocus()
    end
end

--[[
    @instance
    @desc If a mouse drag occurs while the input is focused, the selection will be moved to the mouse drag location, creating a selection between the cursor position and the drag position
    @param <MouseEvent Instance - event>, <boolean - handled>, <boolean - within>
]]
function Input:onMouseDrag( event, handled, within )
    if not self.focused or handled then return end
    self.selection = math.min( #self.value, event.X - self.X + self.scroll )
    event.handled = true
end

--[[
    @instance
    @desc If the mouse up missed the input or the event was already handled, active and false are set to false.
          If within and not handled and input is active focused is set to true. Active is set to false on all conditions.
    @param <MouseEvent Instance - event>, <boolean - handled>, <boolean - within>
]]
function Input:onMouseUp( event, handled, within )
    if ( not within or handled ) and self.focused then
        self:unfocus()
    elseif within and not handled and self.active and not self.focused then
        self:focus()
    end

    self.active = false
end

--[[
    @instance
    @desc Catches char events and inserts the character pressed into the input's value.
    @param <CharEvent Instance - event>, <boolean - handled>
]]
function Input:onChar( event, handled )
    if not self.focused or handled then return end

    local value, position, selection = self.value, self.position, self.selection
    if selection then
        local start, stop = math.min( selection, position ), math.max( selection, position )
        start = start > stop and start - 1 or start

        self.value, self.selection = stringSub( value, 1, start ) .. event.char .. stringSub( value, stop + ( start < stop and 1 or 2 ) ), false
        self.position = start + 1
        self.changed = true
    else
        if self.limit > 0 and #value >= self.limit then return end

        self.value = stringSub( value, 1, position ) .. event.char .. stringSub( value, position + 1 )
        self.position = self.position + 1
    end

    self:executeCallbacks "change"

    event.handled = true
end

--[[
    @instance
    @desc Catches key down events and performs an action depending on the key pressed
    @param <KeyEvent Instance - event>, <boolean - handled>
]]
function Input:onKeyDown( event, handled )
    if not self.focused or handled then return end

    local value, position = self.value, self.position
    local valueLen = #value
    if event.sub == "DOWN" then
        local key, selection, position, application = event.keyName, self.selection, self.position, self.application
        local isPressed, start, stop = application:isPressed( keys.leftShift ) or application:isPressed( keys.rightShift )

        if selection then
            start, stop = selection < position and selection or position, selection > position and selection + 1 or position + 1
        else start, stop = position - 1, position end

        if key == "enter" then
            self:executeCallbacks( "trigger", self.value, self.selection and self:getSelectedValue() )
        elseif selection then
            if key == "delete" or key == "backspace" then
                self.value = stringSub( value, 1, start ) .. stringSub( value, stop )
                self.position = start
                self.selection = false
            elseif not isPressed and ( key == "left" or key == "right" ) then
                self.position = key == "left" and start + 1 or key == "right" and stop - 2
                self.selection = false
            end
        end

        local cSelection = self.selection or self.position
        local function set( offset )
            if isPressed then self.selection = cSelection + offset
            else self.position = self.position + offset; self.selection = false end
        end

        if key == "left" then set( -1 )
        elseif key == "right" then set( 1 ) else
            if key == "home" then
                set( isPressed and -cSelection or -position )
            elseif key == "end" then
                set( isPressed and valueLen - cSelection or valueLen - position )
            elseif key == "backspace" and isPressed then
                self.value, self.position = stringSub( self.value, stop + 1 ), 0
            end
        end

        if not isPressed then
            if key == "backspace" and start >= 0 and not selection then
                self.value = stringSub( value, 1, start ) .. stringSub( value, stop + 1 )
                self.position = start
            elseif key == "delete" and not selection then
                self.value, self.changed = stringSub( value, 1, stop ) .. stringSub( value, stop + 2 ), true
            end
        end
    end
end

--[[
    @instance
    @desc If an assigned label (labelFor set as this nodes ID on a label) is clicked, this input is focused
    @param <Label Instance - label>, <MouseEvent Instance - event>, <boolean - handled>, <boolean - within>
]]
function Input:onLabelClicked( label, event, handled, within )
    self:focus()
    event.handled = true
end

--[[
    @instance
    @desc Draws the inputs background and text to the parent canvas
    @param [boolean - force]
]]
function Input:draw( force )
    local raw = self.raw
    if raw.changed or force then
        local canvas, tc, bg = raw.canvas, raw.colour, raw.backgroundColour
        if raw.focused then tc, bg = raw.focusedColour, raw.focusedBackgroundColour
        elseif raw.active then tc, bg = raw.activeColour, raw.activeBackgroundColour end

        canvas:clear( bg )

        local position, width, value, selection, placeholder = self.position, self.width, self.mask ~= "" and stringRep( self.mask, #self.value ) or self.value, self.selection, self.placeholder
        if self.focused or not placeholder or #value > 0 then
            if self.selection then
                local start, stop = selection < position and selection or position, selection > position and selection + 1 or position + 1
                if start < stop then stop = stop - 1 end

                local startPos = -self.scroll + 1

                canvas:drawTextLine( startPos, 1, stringSub( value, 1, start + 1 ), tc, bg )
                canvas:drawTextLine( startPos + start, 1, stringSub( value, start + 1, stop ), self.focused and self.selectedColour or tc, self.focused and self.selectedBackgroundColour or bg )
                canvas:drawTextLine( startPos + stop, 1, stringSub( value, stop + 1 ), tc, bg )
            else
                canvas:drawTextLine( -self.scroll + 1, 1, value, tc, bg )
            end
        else canvas:drawTextLine( 1, 1, stringSub( placeholder, 1, self.width ), self.placeholderColour, bg ) end

        raw.changed = false
    end
end

--[[
    @instance
    @desc Attempts to reposition the scroll of the input box depending on the position indicator
    @param <number - indicator>
]]
function Input:repositionScroll( indicator )
    local limit = self.limit
    local isLimit = limit > 0

    if indicator >= self.width and indicator > ( self.scroll + self.width - 1 ) then
        self.scroll = math.min( indicator - self.width + 1, #self.value - self.width + 1 ) - ( isLimit and indicator >= limit and 1 or 0 )
    elseif indicator <= self.scroll then
        self.scroll = math.max( self.scroll - ( self.scroll - indicator ), 0 )
    else self.scroll = math.max( math.min( self.scroll, #self.value - self.width + 1 ), 0 ) end
end

--[[
    @instance
    @desc If the given selection is a number, it will be adjusted to fit within the bounds of the input and set. If not, the value will be raw set.
    @param <number|boolean - selection>
]]
function Input:setSelection( selection )
    if type( selection ) == "number" then
        local newSelection = math.max( math.min( selection, #self.value ), 0 )
        self.selection = newSelection ~= self.position and newSelection or false
    else self.selection = selection end

    self:repositionScroll( self.selection or self.position )
    self.changed = true
end

--[[
    @instance
    @desc Returns the value of the input that is selected
    @return <string - selectedValue>
]]
function Input:getSelectedValue()
    local selection, position = self.selection, self.position
    return stringSub( self.value, ( selection < position and selection or position ) + 1, ( selection > position and selection or position ) )
end

--[[
    @instance
    @desc If the given position is equal to the (inputs) selection, the selection will be reset.
          If not equal, the value will be adjusted to fit inside the bounds of the input and then set.
    @param <number - pos>
]]
function Input:setPosition( pos )
    if self.selection == pos then self.selection = false end
    self.position, self.changed = math.max( math.min( pos, #self.value ), 0 ), true

    self:repositionScroll( self.position )
end

--[[
    @instance
    @desc When called, returns the state of the caret, its position (absolute) and colour.
    @return <boolean - caretEnabled>, <number - caretX>, <number - caretY>, <colour - caretColour>
]]
function Input:getCaretInfo( parentLimit )
    local sX, sY = self:getAbsolutePosition( parentLimit )
    local limit = self.limit

    return not self.selection and ( limit <= 0 or self.position < limit ), sX + ( self.position - self.scroll ), sY, self.focusedColour
end


configureConstructor({
    orderedArguments = { "X", "Y", "width" },
    argumentTypes = { value = "string", position = "number", selection = "number", placeholder = "string", placeholderColour = "colour", selectedColour = "colour", selectedBackgroundColour = "colour", limit = "number", mask = "string" },
    useProxy = { "toggled" }
}, true)
