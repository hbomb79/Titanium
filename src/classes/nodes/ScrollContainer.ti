class ScrollContainer extends Container {
    cache = {};

    xScroll = 0;
    yScroll = 0;

    xScrollAllowed = true;
    yScrollAllowed = true;
    propagateMouse = true;

    trayColour = 256;
    scrollbarColour = 128;
    activeScrollbarColour = colours.cyan;

    mouse = {
        selected = false;
        origin = false;
    };
}

function ScrollContainer:__init__( ... )
    self:register( "scrollbarColour", "activeScrollbarColour", "trayColour" )
    self:super( ... )
end

--[[ Event Listeners ]]--
function ScrollContainer:onMouseClick( event, handled, within )
    if handled or not within then return end

    local cache, mouse, key = self.cache, self.mouse
    local X, Y = event.X - self.X + 1, event.Y - self.Y + 1

    if cache.yScrollActive and X == self.width and Y <= cache.displayHeight then
        key = "y"
    elseif cache.xScrollActive and Y == self.height and X <= cache.displayWidth then
        key = "x"
    else return end

    local scrollFn = self[ "set"..key:upper().."Scroll" ]
    local edge, size = cache[ key .. "ScrollPosition" ], cache[ key .. "ScrollSize" ]
    local cScale, dScale = cache[ "content" .. ( key == "x" and "Width" or "Height" ) ], cache[ "display" .. ( key == "x" and "Width" or "Height" ) ]

    local rel = key == "x" and X or Y
    if rel < edge then
        event.handled = scrollFn( self, math.floor( cScale * ( rel / dScale ) - .5 ) )
    elseif rel >= edge and rel <= edge + size - 1 then
        mouse.selected, mouse.origin = key == "x" and "h" or "v", rel - edge + 1
    elseif rel > edge + size - 1 then
        event.handled = scrollFn( self, math.floor( cScale * ( ( rel - size + 1 ) / dScale ) - .5 ) )
    end

    self:cacheScrollbarPosition()
    self.changed = true
end

function ScrollContainer:onMouseScroll( event, handled, within )
    local cache, app = self.cache, self.application
    if handled or not within or not ( cache.xScrollActive or cache.yScrollActive ) then return end

    local isXScroll = ( cache.xScrollActive and ( not cache.yScrollActive or ( app:isPressed( keys.leftShift ) or app:isPressed( keys.rightShift ) ) ) )

    event.handled = self["set".. ( isXScroll and "X" or "Y" ) .."Scroll"]( self, self[ ( isXScroll and "x" or "y" ) .. "Scroll" ] + event.button )
    self:cacheScrollbarPosition()
end

function ScrollContainer:onMouseUp( event, handled, within )
    if self.mouse.selected then
        self.mouse.selected = false
        self.changed = true
    end
end

function ScrollContainer:onMouseDrag( event, handled, within )
    local mouse, cache = self.mouse, self.cache
    if handled or not mouse.selected then return end

    local isV = mouse.selected == "v"
    local key = isV and "Y" or "X"
    local scaleKey = isV and "Height" or "Width"

    event.handled = self[ "set" .. key .. "Scroll" ]( self, math.floor( cache["content" .. scaleKey ] * ( ( ( event[ key ] - self[ key ] + 1 ) - mouse.origin ) / cache["display" .. scaleKey ] ) - .5 ) )
end

function ScrollContainer:addNode( node, ... )
    self.super:addNode( node, ... )

    self:cacheContent()

    return node
end

--[[ Core Functions ]]--
function ScrollContainer:handle( eventObj )
    local cache, isWithin = self.cache, eventObj.isWithin
    local cloneEv

    if eventObj.main == "MOUSE" then
        eventObj.isWithin = eventObj:withinParent( self )
        if ( not cache.yScrollActive or ( eventObj.X - self.X + 1 ) ~= self.width ) and ( not cache.xScrollActive or ( eventObj.Y - self.Y + 1 ) ~= self.height ) then
            cloneEv = eventObj:clone( self )
            cloneEv.Y = cloneEv.Y + self.yScroll
            cloneEv.X = cloneEv.X + self.xScroll
        end
    else cloneEv = eventObj end

    if cloneEv then self:shipEvent( cloneEv ) end
    local r = self.super.super:handle( eventObj )

    eventObj.isWithin = isWithin
    return r == nil and true or r
end

function ScrollContainer:isNodeInBounds( node, width, height )
    local left, top = node.X - self.xScroll, node.Y - self.yScroll

    return not ( ( left + node.width ) < 1 or left > ( width or self.width ) or top > ( height or self.height ) or ( top + node.height ) < 1 )
end

function ScrollContainer:draw( force )
    if self.changed or force then
        self.super:draw( force, -self.xScroll, -self.yScroll )
        self:drawScrollbars()
    end
end

function ScrollContainer:drawScrollbars()
    local cache, canvas = self.cache, self.canvas
    local xEnabled, yEnabled = cache.xScrollActive, cache.yScrollActive

    if xEnabled then
        canvas:drawBox( 1, self.height, cache.displayWidth, 1, self.trayColour )
        canvas:drawBox( cache.xScrollPosition, self.height, cache.xScrollSize, 1, self.mouse.selected == "h" and self.activeScrollbarColour or self.scrollbarColour )
    end

    if yEnabled then
        canvas:drawBox( self.width, 1, 1, cache.displayHeight, self.trayColour )
        canvas:drawBox( self.width, cache.yScrollPosition, 1, cache.yScrollSize, self.mouse.selected == "v" and self.activeScrollbarColour or self.scrollbarColour )
    end

    if yEnabled and xEnabled then
        canvas:drawPoint( self.width, self.height, " ", 1, self.trayColour )
    end
end

function ScrollContainer:redrawArea( x, y, width, height )
    self.super:redrawArea( x, y, width, height, -self.xScroll, -self.yScroll )
end

function ScrollContainer:setYScroll( yScroll )
    local oY, cache = self.yScroll, self.cache
    self.yScroll = math.max( 0, math.min( cache.contentHeight - cache.displayHeight, yScroll ) )

    self:cacheScrollbarPosition()
    if ( not self.propagateMouse ) or oY ~= self.yScroll then
        return true
    end
end

function ScrollContainer:setXScroll( xScroll )
    local oX, cache = self.xScroll, self.cache
    self.xScroll = math.max( 0, math.min( cache.contentWidth - cache.displayWidth, xScroll ) )

    self:cacheScrollbarPosition()
    if ( not self.propagateMouse ) or oX ~= self.xScroll then
        return true
    end
end

function ScrollContainer:setHeight( height )
    self.super:setHeight( height )
    self:cacheContent()
end

function ScrollContainer:setWidth( width )
    self.super:setWidth( width )
    self:cacheContent()
end

--[[ Caching Functions ]]--
function ScrollContainer:cacheContent()
    self:cacheContentSize()
    self:cacheActiveScrollbars()
end

function ScrollContainer:cacheContentSize()
    local w, h = 0, 0

    local nodes, node = self.nodes
    for i = 1, #nodes do
        node = nodes[ i ]

        w = math.max( node.X + node.width - 1, w )
        h = math.max( node.Y + node.height - 1, h )
    end

    self.cache.contentWidth, self.cache.contentHeight = w, h
end

function ScrollContainer:cacheDisplaySize( single )
    local cache = self.cache
    cache.displayWidth, cache.displayHeight = self.width - ( cache.yScrollActive and 1 or 0 ), self.height - ( cache.xScrollActive and 1 or 0 )

    if not single then self:cacheScrollbarSize() end
end

function ScrollContainer:cacheActiveScrollbars()
    local cache = self.cache
    local cWidth, cHeight, sWidth, sHeight = cache.contentWidth, cache.contentHeight, self.width, self.height
    local xAllowed, yAllowed = self.xScrollAllowed, self.yScrollAllowed

    local horizontal, vertical
    if ( cWidth > sWidth and xAllowed ) or ( cHeight > sHeight and yAllowed ) then
        cache.xScrollActive, cache.yScrollActive = cWidth > sWidth - 1 and xAllowed, cHeight > sHeight - 1 and yAllowed
    else
        cache.xScrollActive, cache.yScrollActive = false, false
    end

    self:cacheDisplaySize()
end

function ScrollContainer:cacheScrollbarSize()
    local cache = self.cache
    cache.xScrollSize, cache.yScrollSize = math.floor( cache.displayWidth * ( cache.displayWidth / cache.contentWidth ) + .5 ), math.floor( cache.displayHeight * ( cache.displayHeight / cache.contentHeight ) + .5 )

    self:cacheScrollbarPosition()
end

function ScrollContainer:cacheScrollbarPosition()
    local cache = self.cache
    cache.xScrollPosition, cache.yScrollPosition = math.ceil( self.xScroll / cache.contentWidth * cache.displayWidth + .5 ), math.ceil( self.yScroll / cache.contentHeight * cache.displayHeight + .5 )

    self.changed = true
    self:redrawArea( 1, 1, self.width, self.height )
end

configureConstructor {
    argumentTypes = {
        scrollbarColour = "colour",
        activeScrollbarColour = "colour",
        xScrollAllowed = "boolean",
        yScrollAllowed = "boolean"
    }
}
