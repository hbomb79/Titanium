local function isThreadRunning( obj )
    if not obj.thread then return false end

    return obj.thread.running
end

class Terminal extends Node mixin MFocusable {
    static = {
        focusedEvents = {
            MOUSE = true,
            KEY = true,
            CHAR = true
        }
    };

    canvas = true;
    displayThreadStatus = true;
}

function Terminal:__init__( ... )
    self:resolve( ... )
    self:super()

    self.canvas = RedirectCanvas( self )
    self.redirect = self.canvas:getTerminalRedirect()
end

function Terminal:wrapChunk()
    if type( self.chunk ) ~= "function" then
        return error "Cannot wrap chunk. No chunk function set."
    end

    self.canvas:resetTerm()

    self.thread = Thread( self.chunk )
    self:resume( GenericEvent "titanium_terminal_start" )
end

function Terminal:resume( event )
    if not isThreadRunning( self ) then return end

    if not Titanium.typeOf( event, "Event", true ) then
        return error "Invalid event object passed to resume terminal thread"
    end

    local thread, old = self.thread, term.redirect( self.redirect )
    thread:filterHandle( event )
    term.redirect( old )

    if not thread.running then
        if type( thread.exception ) == "string" then
            if self.displayThreadStatus then
                self:emulate(function() printError( "Thread Crashed: " .. tostring( thread.exception ) ) end)
            end

            self:executeCallbacks("exception", thread)
        else
            if self.displayThreadStatus then
                self:emulate(function() print "Finished" end)
            end

            self:executeCallbacks("finish", thread, true)
        end

        self:executeCallbacks("finish", thread, false)
    end

    self.changed = true
end

function Terminal:emulate( fn )
    if type( fn ) ~= "function" then
        return error("Failed to emulate function. '"..tostring( fn ).."' is not valid")
    end

    local old = term.redirect( self.redirect )
    local ok, err = pcall( fn )
    term.redirect( old )

    if not ok then
        return error("Failed to emulate function. Reason: "..tostring( err ), 3)
    end
end

function Terminal:setChunk( chunk )
    self.chunk = chunk
    self:wrapChunk()
end

function Terminal:getCaretInfo()
    local c = self.canvas
    return isThreadRunning( self ) and c.tCursor, c.tX + self.X - 1, c.tY + self.Y - 1, c.tColour
end

function Terminal:handle( eventObj )
    if eventObj.handled or not isThreadRunning( self ) then return end

    if eventObj.main == "MOUSE" then
        if eventObj:withinParent( self ) then self:focus() else self:unfocus() end
        eventObj = eventObj:clone( self )
    end

    if Terminal.focusedEvents[ eventObj.main ] and not self.focused then return end
    self:resume( eventObj )
end

function Terminal:draw( force ) end

configureConstructor({
    orderedArguments = { "X", "Y", "width", "height", "chunk" },
    argumentTypes = { chunk = "function" },
    useProxy = { "chunk" }
}, true)
