local function isThreadRunning( obj )
    if not obj.thread then return false end

    return obj.thread.running
end

--[[
    The terminal class is a node designed to emulate term programs. For example, the CraftOS shell can be run inside of this
    node, with full functionality.

    This could potentially be used to embed Titanium applications, however a more sophisticated approach is in the works.
]]

class Terminal extends Node mixin MFocusable {
    static = {
        focusedEvents = {
            MOUSE = true,
            KEY = true,
            CHAR = true
        }
    };

    canvas = true;
    displayThreadStatus = true;
}


--[[
    @instance
    @desc Creates a terminal instance and creating a custom redirect canvas (the program being run inside the terminal requires a term redirect)
    @param [number - X], [number - Y], [number - width], [number - height], [function - chunk]
]]
function Terminal:__init__( ... )
    self:resolve( ... )
    self:super()

    self.canvas = RedirectCanvas( self )
    self.redirect = self.canvas:getTerminalRedirect()
end

--[[
    @instance
    @desc 'Wraps' the chunk (self.chunk - function) by creating a Thread instance with the chunk as its function (coroutine).
          The embedded program is then started by resuming the coroutine with 'titanium_terminal_start'.

          A chunk must be set on the terminal node for this function to succeed. This function is automatically executed
          when a chunk is set (self.chunk = fChunk, or self:setChunk( fChunk ) ).
]]
function Terminal:wrapChunk()
    if type( self.chunk ) ~= "function" then
        return error "Cannot wrap chunk. No chunk function set."
    end

    self.canvas:resetTerm()

    self.thread = Thread( self.chunk )
    self:resume( GenericEvent "titanium_terminal_start" )
end

--[[
    @instance
    @desc Resumes the terminal with the given event. If the event is a mouse event its co-ordinates should have been adjusted to accomodate the terminal location
          This is done automatically if the event is delivered via 'self:handle'.

          The terminal (thread) is then resumed with this event. If the thread crashes, the 'exception' callback is executed with the thread. Access the exception using
          'thread.exception'.

          If the thread finished (gracefully), the 'finish' callback will be executed, with the thread AND a boolean (true), to indicate graceful finish
          If the thread did not finish gracefully, the above will occur, however the boolean will be false as opposed to true.
    @param <Event Instance - event>
]]
function Terminal:resume( event )
    if not isThreadRunning( self ) then return end

    if not Titanium.typeOf( event, "Event", true ) then
        return error "Invalid event object passed to resume terminal thread"
    end

    local thread, old = self.thread, term.redirect( self.redirect )
    thread:filterHandle( event )
    term.redirect( old )

    if not thread.running then
        if type( thread.exception ) == "string" then
            if self.displayThreadStatus then
                self:emulate(function() printError( "Thread Crashed: " .. tostring( thread.exception ) ) end)
            end

            self:executeCallbacks("exception", thread)
        else
            if self.displayThreadStatus then
                self:emulate(function() print "Finished" end)
            end

            self:executeCallbacks("finish", thread, true)
        end

        self:executeCallbacks("finish", thread, false)
    end

    self.changed = true
end

--[[
    @instance
    @desc Allows a custom function to be executed with the terminals redirect being used, with error catching.
    @param <function - fn>
]]
function Terminal:emulate( fn )
    if type( fn ) ~= "function" then
        return error("Failed to emulate function. '"..tostring( fn ).."' is not valid")
    end

    local old = term.redirect( self.redirect )
    local ok, err = pcall( fn )
    term.redirect( old )

    if not ok then
        return error("Failed to emulate function. Reason: "..tostring( err ), 3)
    end
end

--[[
    @setter
    @desc Sets the chunk on the instance, and wraps the chunk using 'wrapChunk'.
    @param <function - chunk>
]]
function Terminal:setChunk( chunk )
    self.chunk = chunk
    self:wrapChunk()
end

--[[
    @instance
    @desc Provides the information required by the nodes application to draw the application caret.
    @return <boolean - caretEnabled>, <number - caretX>, <number - caretY>, <colour - caretColour>
]]
function Terminal:getCaretInfo( parentLimit )
    local c = self.canvas
    local sX, sY = self:getAbsolutePosition( parentLimit )

    return isThreadRunning( self ) and c.tCursor, sX + c.tX - 1, sY + c.tY - 1, c.tColour
end

--[[
    @instance
    @desc If a MouseEvent is received, it's position is adjusted to become relative to this node before being passed to the terminal thread.
    @param <Event Instance - eventObj>
]]
function Terminal:handle( eventObj )
    if not isThreadRunning( self ) then self:unfocus(); return end

    if eventObj.main == "MOUSE" then
        if not eventObj.handled and eventObj:withinParent( self ) then self:focus() else self:unfocus() end
        eventObj = eventObj:clone( self )
    elseif eventObj.handled then
        return
    end

    if Terminal.focusedEvents[ eventObj.main ] and not self.focused then return end
    self:resume( eventObj )
end

--[[
    @instance
    @desc The terminal node has no need to draw any custom graphics to it's canvas - the running thread does all the drawing.
          The parent node automatically draws the node canvas to it's own, so there is no need to run any draw code here.
]]
function Terminal:draw() end

configureConstructor({
    orderedArguments = { "X", "Y", "width", "height", "chunk" },
    argumentTypes = { chunk = "function" },
    useProxy = { "chunk" }
}, true)
