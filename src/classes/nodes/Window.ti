--[[
    TODO
]]

class Window extends Container mixin MFocusable {
    static = {
        proxyMethods = { "addNode", "removeNode", "getNode", "query", "clearNodes" }
    };

    titleBar = true;
    titleBarColour = 16384;
    titleBarBackgroundColour = 128;

    closeable = true;
    closeButtonChar = "\7";
    closeButtonColour = 16384;

    resizeable = true;
    resizeButtonChar = "/";
    resizeButtonColour = 256;

    moveable = true;

    shadow = true;
    shadowColour = 128;

    transparent = true;
}

--[[
    @constructor
    @desc Creates the default window layout, complete with a titlebar and content container
]]
function Window:__init__( ... )
    self:resolve( ... )
    self:super()

    self.titleBarContent = self:addNode( Container():set {
        id = "titlebar",

        width = "$parent.width - ( parent.shadow and 1 or 0 )",

        backgroundColour = "$parent.titleBarBackgroundColour",
        colour = "$not parent.enabled and parent.disabledColour or parent.titleBarColour"
    })

    self.titleBarTitle = self.titleBarContent:addNode( Label( "" ) )

    local b = self.titleBarContent:addNode( Button( "" ):set( "X", "$parent.width" ) )
    b:set {
        backgroundColour = "$parent.parent.closeButtonBackgroundColour",
        colour = "$parent.parent.closeButtonColour",
        text = "$parent.parent.closeButtonChar",
        visible = "$parent.parent.closeable",
        enabled = "$self.visible"
    }

    b:on("trigger", function()
        self:executeCallbacks "close"
        self.parent:removeNode( self )
    end)

    self.content = self:addNode( ScrollContainer():set {
        Y = "$parent.titleBar and 2 or 1",

        width = "$parent.width - ( parent.shadow and 1 or 0 )",
        height = "$parent.height - ( parent.titleBar and 1 or 0 ) - ( parent.shadow and 1 or 0 )",

        backgroundColour = "$parent.enabled and ( parent.focused and parent.focusedBackgroundColour ) or ( not parent.enabled and parent.disabledBackgroundColour ) or parent.backgroundColour",
        colour = "$parent.enabled and ( parent.focused and parent.focusedColour ) or ( not parent.enabled and parent.disabledColour ) or parent.colour",

        id = "content"
    } )

    for _, name in pairs( Window.static.proxyMethods ) do
        self[ name ] = function( self, ... )
            return self.content[ name ]( self.content, ... )
        end

        self[ name .. "Raw" ] = function( self, ... )
            return self.super[ name ]( self, ... )
        end
    end

    self:watchProperty( "width", function( _, __, value )
        return self:updateWidth( value )
    end, "WINDOW_MIN_MAX_WIDTH_CHECK" )

    self:watchProperty( "height", function( _, __, value )
        return self:updateHeight( value )
    end, "WINDOW_MIN_MAX_HEIGHT_CHECK" )
end

--[[
    @instance
    @desc TODO
    @param <MouseEvent Instance - event>, <boolean - handled>, <boolean - within>
]]
function Window:onMouseClick( event, handled, within )
    if within and not handled and event.button == 1 then
        local X, Y = event.X - self.X + 1, event.Y - self.Y + 1
        if self.moveable and Y == 1 and ( X >= 1 and X <= self.titleBarContent.width - ( self.closeable and 1 or 0 ) ) then
            self.mouse = { "move", X, Y }
            event.handled = true
        elseif self.resizeable and Y == self.content.height + ( self.titleBar and 1 or 0 ) and X == self.content.width then
            self.mouse = { "resize", event.X - self.width, event.Y - self.height }
            event.handled = true
        end
    end
end

--[[
    @instance
    @desc TODO
    @param <MouseEvent Instance - event>, <boolean - handled>, <boolean - within>
]]
function Window:onMouseUp( event, handled, within )
    self.mouse = nil
end

--[[
    @instance
    @desc TODO
    @param <MouseEvent Instance - event>, <boolean - handled>, <boolean - within>
]]
function Window:onMouseDrag( event, handled, within )
    if not handled and self.mouse then
        if self.mouse[ 1 ] == "move" then
            self.X = event.X - self.mouse[ 2 ] + 1
            self.Y = event.Y - self.mouse[ 3 ] + 1
        elseif self.mouse[ 1 ] == "resize" then
            self.width = event.X - self.mouse[ 2 ]
            self.height = event.Y - self.mouse[ 3 ]
        else return end

        event.handled = true
    end
end

--[[
    @instance
    @desc Updates the titleBar label to display a correctly truncated version of the windows title.
]]
function Window:updateTitle()
    local title, titleContentWidth = self.title, self.titleBarContent.width - ( self.closeable and 3 or 2 )

    self.titleBarTitle.text = title and #title > titleContentWidth and title:sub( 1, math.max( 1, titleContentWidth - 2 ) ) .. ".." or title or ""
end

--[[
    @instance
    @desc Returns a bounded (min/max width) version of 'w' (or self.width if 'w' not provided).
    @param [number - w]
    @return <number - boundedW>
]]
function Window:updateWidth( w )
    w = w or self.width

    w = self.minWidth and math.max( w, self.minWidth ) or w
    return math.max( self.maxWidth and math.min( w, self.maxWidth ) or w, ( self.shadow and 4 or 3 ) )
end

--[[
    @instance
    @desc Returns a bounded (min/max height) version of 'h' (or self.height if 'h' not provided).
    @param [number - h]
    @return <number - boundedH>
]]
function Window:updateHeight( h )
    h = h or self.height

    h = self.minHeight and math.max( h, self.minHeight ) or h
    return math.max( self.maxHeight and math.min( h, self.maxHeight ) or h, ( self.titleBar and 4 or 3 ) )
end

--[[
    @instance
    @desc A custom draw function that invokes the super:draw method, before drawing the shadow and resize handle over top.
]]
function Window:draw( ... )
    self.super:draw( ... )

    -- Draw the shadow, and the transparent pixels
    if self.shadow then
        local canvas = self.canvas
        canvas:drawBox( self.width, 2, 1, self.height - 2, self.shadowColour )
        canvas:drawBox( 3, self.height, self.width - 2, 1, self.shadowColour )
    end

    if self.resizeable then
        self.canvas:drawPoint( self.content.width, self.content.height + ( self.titleBar and 1 or 0 ), self.resizeButtonChar, self.resizeButtonColour, self.resizeButtonBackgroundColour )
    end
end

--[[
    @setter
    @desc Sets the width of the window, following the min/max properties (ie: uses :updateWidth())
    @param <number - width>
]]
function Window:setWidth( width )
    self.super:setWidth( self:updateWidth( width ) )
    self:updateTitle()
end

--[[
    @setter
    @desc Sets the minimum width the window can be. The current width will be increased if it falls below this limit.
    @param <number - minWidth>
]]
function Window:setMinWidth( minWidth )
    self.minWidth = minWidth
    self:updateWidth()
end

--[[
    @setter
    @desc Sets the maximum width the window can be. The current width will be reduced if it exceeds this limit.
    @param <number - maxWidth>
]]
function Window:setMaxWidth( maxWidth )
    self.maxWidth = maxWidth
    self:updateWidth()
end

--[[
    @setter
    @desc Sets the height of the window, following the min/max properties (ie: uses :updateHeight())
    @param <number - height>
]]
function Window:setHeight( height )
    self.super:setHeight( self:updateHeight( height ) )
end

--[[
    @setter
    @desc Sets the minimum height the window can be. The current height will be increased if it falls below this limit.
    @param <number - minHeight>
]]
function Window:setMinHeight( minHeight )
    self.minHeight = minHeight
    self:updateHeight()
end

--[[
    @setter
    @desc Sets the maximum height the window can be. The current height will be reduced if it exceeds this limit.
    @param <number - maxHeight>
]]
function Window:setMaxHeight( maxHeight )
    self.maxHeight = maxHeight
    self:updateHeight()
end

--[[
    @setter
    @desc Sets the new title of the window, and then calls :updateTitle to apply the change to the titleBar label
    @param <string - title>
]]
function Window:setTitle( title )
    self.title = title
    self:updateTitle()
end

configureConstructor {
    argumentTypes = {
        title = "text",
        titleBar = "boolean",
        titleBarColour = "colour",
        titleBarBackgroundColour = "colour",

        closeable = "boolean",
        closeButtonChar = "string",
        closeButtonColour = "colour",
        closeButtonBackgroundColour = "colour",

        resizeable = "boolean",
        resizeButtonChar = "string",
        resizeButtonColour = "colour",
        resizeButtonBackgroundColour = "colour",

        moveable = "boolean",

        minWidth = "number",
        minHeight = "number",

        maxWidth = "number",
        maxHeight = "number",

        shadow = "boolean",
        shadowColour = "colour"
    }
}