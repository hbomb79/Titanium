class Window extends Container mixin MFocusable {
    titleBar = true;
    titleBarColour = 16384;
    titleBarBackgroundColour = 128;

    closeable = true;
    closeButtonChar = "\7";
    closeButtonColour = 16384;

    resizeable = true;
    resizeButtonChar = "/";
    resizeButtonBackgroundColour = 0;
    resizeButtonColour = 256;

    moveable = true;

    shadow = true;
    shadowColour = 128;

    transparent = true;
}

--[[
    @constructor
    @desc Creates the default window layout, complete with a titlebar and content container
]]
function Window:__init__( ... )
    self:resolve( ... )
    self:super()

    self.titleBarContent = self:addNode( Container():set {
        id = "titlebar",

        width = "$parent.width - ( parent.shadow and 1 or 0 )",

        backgroundColour = "$parent.titleBarBackgroundColour",
        colour = "$not parent.enabled and parent.disabledColour or parent.titleBarColour"
    })

    local l = self.titleBarContent:addNode( Label( "" ) )
    l:set( "text", "$parent.parent.title" )

    local b = self.titleBarContent:addNode( Button( "" ):set( "X", "$parent.width" ) )
    b:set {
        backgroundColour = "$parent.parent.closeButtonBackgroundColour",
        colour = "$parent.parent.closeButtonColour",
        text = "$parent.parent.closeButtonChar"
    }

    self.content = self:addNode( ScrollContainer():set {
        Y = "$parent.titleBar and 2 or 1",

        width = "$parent.width - ( parent.shadow and 1 or 0 )",
        height = "$parent.height - ( parent.titleBar and 1 or 0 ) - ( parent.shadow and 1 or 0 )",

        backgroundColour = "$parent.enabled and ( parent.focused and parent.focusedBackgroundColour ) or ( not parent.enabled and parent.disabledBackgroundColour ) or parent.backgroundColour",
        colour = "$parent.enabled and ( parent.focused and parent.focusedColour ) or ( not parent.enabled and parent.disabledColour ) or parent.colour",

        id = "content"
    } )

    self:watchProperty( "title", function( self, property, value )
        local titleContentWidth = self.titleBarContent.width - ( self.closeable and 3 or 2 )

        return value and #value > titleContentWidth and value:sub( 1, titleContentWidth - 2 ) .. ".." or value or ""
    end, "WINDOW_TITLE_BIND_" .. self.__ID )
end

function Window:draw( ... )
    self.super:draw( ... )

    -- Draw the shadow, and the transparent pixels
    if self.shadow then
        local canvas = self.canvas
        canvas:drawBox( self.width, 2, 1, self.height - 1, self.shadowColour )
        canvas:drawBox( 2, self.height, self.width - 1, 1, self.shadowColour )
    end
end

configureConstructor {
    argumentTypes = {
        title = "text",
        titleBar = "boolean",
        titleBarColour = "colour",
        titleBarBackgroundColour = "colour",

        closeable = "boolean",
        closeButtonChar = "string",
        closeButtonColour = "colour",
        closeButtonBackgroundColour = "colour",

        resizeable = "boolean",
        resizeButtonChar = "string",
        resizeButtonColour = "colour",
        resizeButtonBackgroundColour = "colour",

        moveable = "boolean",

        minWidth = "number",
        minHeight = "number",

        maxWidth = "number",
        maxHeight = "number",

        shadow = "boolean",
        shadowColour = "colour"
    }
}