--[[
    @instance inCondition - boolean (def. false) - If true, the lexer is currently processing a condition

    A lexer that processes node queries into tokens used by QueryParser
]]

class QueryLexer extends Lexer {
    static = {
        validSymbols = { "==", "<", ">", ">=", "<=", "~=" }
    }
}

--[[
    @instance
    @desc The main token creator
]]
function QueryLexer:tokenize()
    if self.stream:find "^%s" and not self.inCondition then
        self:pushToken { type = "QUERY_SEPERATOR" }
    end

    local stream = self:trimStream()

    if self.inCondition then
        self:tokenizeCondition( stream )
    elseif stream:find "^~" then
        self:pushToken { type = "QUERY_TYPEOF", value = self:consumePattern "^~" }
    elseif stream:find "^%b[]" then
        self:pushToken { type = "QUERY_COND_OPEN" }
        self:consume( 1 )

        self.inCondition = true
    elseif stream:find "^[%[%]]" then
        self:throw("Unmatched conditon opening/closing ([ or ])")
    elseif stream:find "^%," then
        self:pushToken { type = "QUERY_END", value = self:consumePattern "^%," }
    elseif stream:find "^>" then
        self:pushToken { type = "QUERY_DIRECT_PREFIX", value = self:consumePattern "^>" }
    elseif stream:find "^#[^%s%.#%[%,]*" then
        self:pushToken { type = "QUERY_ID", value = self:consumePattern "^#([^%s%.#%[%,]*)" }
    elseif stream:find "^%.[^%s#%[%,]*" then
        self:pushToken { type = "QUERY_CLASS", value = self:consumePattern "^%.([^%s#%[%,]*)" }
    elseif stream:find "^[^,%s#%.%[]*" then
        self:pushToken { type = "QUERY_TYPE", value = self:consumePattern "^[^,%s#%.%[]*" }
    else
        self:throw("Unexpected block '"..stream:match("(.-)%s").."'")
    end
end

--[[
    @instance
    @desc When the lexer finds a condition (isCondition = true), this function is used to lex the condition
    @param <string - stream>
]]
function QueryLexer:tokenizeCondition( stream )
    local first = stream:sub( 1, 1 )
    if stream:find "%b[]" then
        self:throw( "Nested condition found '"..tostring( stream:match "%b[]" ).."'" )
    elseif stream:find "^%b''" or stream:find '^%b""' then
        local cnt = self:consumePattern( first == "'" and "^%b''" or '^%b""' ):sub( 2, -2 )
        if cnt:find "%b''" or cnt:find '%b""' then
            self:throw( "Nested string found inside '"..tostring( cnt ).."'" )
        end

        self:pushToken { type = "QUERY_COND_STRING_ENTITY", value = cnt }
    elseif stream:find "^%w+" then
        self:pushToken { type = "QUERY_COND_ENTITY", value = self:consumePattern "^%w+" }
    elseif stream:find "^%," then
        self:pushToken { type = "QUERY_COND_SEPERATOR", value = "," }
        self:consume( 1 )
    elseif stream:find "^#" then
        self:pushToken { type = "QUERY_COND_MODIFIER", value = "#" }
        self:consume( 1 )
    elseif stream:find "^%]" then
        self:pushToken { type = "QUERY_COND_CLOSE", value = "]" }
        self:consume( 1 )
        self.inCondition = false
    else
        for _, val in pairs( QueryLexer.static.validSymbols ) do
            if stream:find( ("^%s"):format( val ) ) then
                self:pushToken { type = "QUERY_COND_SYMBOL", value = self:consumePattern( ( "^%s" ):format( val ) ) }
                return
            end
        end

        self:throw("Invalid condition syntax. Expected property near '"..tostring( stream:match "%S*" ).."'")
    end
end
