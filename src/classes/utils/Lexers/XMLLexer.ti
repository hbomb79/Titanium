--[[
    @instance openTag - boolean (def. false) - If true, the lexer is currently inside of an XML tag
    @instance definingAttribute - boolean (def. false) - If true, the lexer is currently inside an opening XML tag and is trying to find attributes (XML_ATTRIBUTE_VALUE)
    @instance currentAttribute - boolean (def. false) - If true, the lexer will take the next token as an attribute value (after '=')

    A lexer than processes XML content into tokens used by XMLParser
]]

class XMLLexer extends Lexer {
    openTag = false;
    definingAttribute = false;
    currentAttribute = false;
}

--[[
    @instance
    @desc Searches for a XML comment closer. If one is found, all content between the opener and closer is removed from the stream.

          If one cannot be found, all content after the opener is removed from the stream
]]
function XMLLexer:consumeComment()
    local stream = self.stream

    local found = stream:find( "%-%-%>", 4 )
    if found then
        self.stream = stream:sub( found + 3 )
    else self.stream = "" end
end

--[[
    @instance
    @desc Converts the stream into tokens by way of pattern matching
]]
function XMLLexer:tokenize()
    self:trimStream()
    local stream, openTag, currentAttribute, definingAttribute = self:trimStream(), self.openTag, self.currentAttribute, self.definingAttribute
    local first = stream:sub( 1, 1 )

    if stream:find "^<(%w+)" then
        self:pushToken({type = "XML_OPEN", value = self:consumePattern "^<(%w+)"})
        self.openTag = true
    elseif stream:find "^</(%w+)>" then
        self:pushToken({type = "XML_END", value = self:consumePattern "^</(%w+)>"})
        self.openTag = false
    elseif stream:find "^/>" then
        self:pushToken({type = "XML_END_CLOSE"})
        self:consume( 2 )
        self.openTag = false
    elseif stream:find "^%<%!%-%-" then
        self:consumeComment()
    elseif openTag and stream:find "^%w+" then
        self:pushToken({type = definingAttribute and "XML_ATTRIBUTE_VALUE" or "XML_ATTRIBUTE", value = self:consumePattern "^%w+"})

        if not definingAttribute then
            self.currentAttribute = true
            return
        end
    elseif not openTag and stream:find "^([^<]+)" then
        local content = self:consumePattern "^([^<]+)"

        local newlines = select( 2, content:gsub("\n", "") )
        if newlines then self:newline( newlines ) end

        self:pushToken({type = "XML_CONTENT", value = content })
    elseif first == "=" then
        self:pushToken({type = "XML_ASSIGNMENT", value = "="})
        self:consume( 1 )

        if currentAttribute then
            self.definingAttribute = true
        end

        return
    elseif first == "'" or first == "\"" then
        self:pushToken({type = definingAttribute and "XML_STRING_ATTRIBUTE_VALUE" or "XML_STRING", value = self:consumeString( first )})
    elseif first == ">" then
        self:pushToken({type = "XML_CLOSE"})
        self.openTag = false
        self:consume( 1 )
    else
        self:throw("Unexpected block '"..stream:match("(.-)%s").."'")
    end

    if self.currentAttribute then self.currentAttribute = false end
    if self.definingAttribute then self.definingAttribute = false end
end
