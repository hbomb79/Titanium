local TERMS = { "NAME", "STRING", "NUMBER", "PAREN", "QUERY" }
local BIN_AMBIG = { "binary", "ambiguos" }
local UNA_AMBIG = { "unary", "ambiguos" }

--[[
    @instance stacks - table (def. {{}}) - A two dimensional table, containing the stacks used by the query (ie: self.value, self.parent.value). Can be resolved to find the values using :resolveStacks
    @instance state - string (def. "root") - The current state of the parser, can be 'root' or 'name'. If 'root', :parseRootState will be called, else :parseNameState
    @instance output - string (def. "local args = ...; return") - The Lua equation formed while parsing.

    Parses the tokens from DynamicEqLexer into a Lua equation (string) and a set of stacks
]]

class DynamicEqParser extends Parser {
    state = "root";
    stacks = {{}};
    output = "local args = ...; return ";
}

--[[
    @constructor
    @desc Invokes the Parser constructor, passing the tokens from the DynamicEqLexer (using the expression provided)
    @param <string - expression>
]]
function DynamicEqParser:__init__( expression )
    self:super( DynamicEqLexer( expression ).tokens )
end

--[[
    @instance
    @desc Allows precise testing of adjacent operators so that a tokens position can be validated.

          If the beforeType is specified, without an afterType the token before the current token must be an operator of the type specified using 'beforeType'.
          If the afterType is specified, without a beforeType, the same as above applies for the token after the current token.

          If both before and after type are specified, both the token before and after the current must match the type specified using 'beforeType' and 'afterType' respectively.

          If 'optional', the test will no fail if no token exists before/after the current token (depending on which types are specified).

          If the 'beforeOffset' or 'afterOffset' is specified, the token checked before or after the current token will be offset by the amount specified.
    @param [string, table - beforeType], [string, table - afterType], [boolean - optional], [number - beforeOffset], [number - afterOffset]
    @return <boolean - success>
]]
function DynamicEqParser:testForOperator( beforeType, afterType, optional, beforeOffset, afterOffset )
    local pass, before, after = self:testAdjacent( beforeType and "OPERATOR", afterType and "OPERATOR", false, beforeOffset, afterOffset, not optional )
    if not pass then return false end

    local function test( token, filter )
        if not token then return true elseif not filter then return false end
        if type( filter ) == "table" then
            for i = 1, #filter do
                if token[ filter[ i ] ] or filter[ i ] == "*" then return true end
            end
        else
            if type == "*" then return true end
            return token[ filter ]
        end
    end

    local bT, aT = test( before, beforeType ), test( after, afterType )
    if beforeType and afterType then return bT and aT else return ( beforeType and bT ) or ( afterType and aT ) end
end

--[[
    @instance
    @desc Tests for terms before the current token (if 'pre') and after the current token (if 'post'). If no token before/after current token and not 'optional', test will fail.

          A term is a 'NAME', 'STRING', 'NUMBER', or 'PAREN' token from the lexer
    @param [boolean - pre], [boolean - post], [boolean - optional]
    @return <boolean - success>
]]
function DynamicEqParser:testForTerms( pre, post, optional )
    return self:testAdjacent( pre and TERMS, post and TERMS, false, false, false, not optional )
end

--[[
    @instance
    @desc Resolves the current stacks found using the parser by finding the Titanium instance attached to it. Stacks are passed to MPropertyManager:dynamicallyLinkProperty as 'arguments'
    @param <Instance - target>
    @return <table - instances>
]]
function DynamicEqParser:resolveStacks( target, allowFailure )
    local stacks, instances = self.stacks, {}
    for i = 1, #stacks - ( #stacks[ #stacks ] == 0 and 1 or 0 ) do
        local stack = stacks[ i ]
        if #stack <= 1 then
            self:throw("Invalid stack '".. stack[ 1 ] .."'. At least 2 parts must exist to resolve")
        end

        local stackStart, instancePoint = stack[ 1 ]
        if stackStart == "self" then
            instancePoint = target
        elseif stackStart == "parent" then
            instancePoint = target.parent
        elseif stackStart == "application" then
            instancePoint = target.application
        elseif stackStart:sub( 1, 1 ) == "{" then
            if not target.application then
                if allowFailure then return end
                self:throw "Cannot resolve stacks. Resolution of node queries requires an application instance be set on the target"
            end

            local query = NodeQuery( target.application, stackStart:sub( 2, -2 ) ).result
            if not query then
                if allowFailure then return end

                self:throw( "Failed to resolve stacks. Node query '"..stackStart.."' resolved to 0 nodes" )
            end

            instancePoint = query[ 1 ]
        else self:throw("Invalid stack start '"..stackStart.."'. Only self, parent and application allowed") end

        for p = 2, #stack - 1 do
            if not instancePoint then if allowFailure then return end self:throw("Failed to resolve stacks. Index '"..stack[ p ].."' could not be accessed on '"..tostring( instancePoint ).."'") end
            instancePoint = instancePoint[ stack[ p ] ]
        end

        if not instancePoint then if allowFailure then return end self:throw "Invalid instance" elseif not stack[ #stack ] then self:throw "Invalid property" end
        instances[ #instances + 1 ] = { stack[ #stack ], instancePoint }
    end

    return instances
end

--[[
    @instance
    @desc Appends 'str' to the parser output. If no 'str' is given, the 'value' of the current token is appended instead
    @param [string - str]
]]
function DynamicEqParser:appendToOutput( str )
    self.output = self.output .. ( str or self:getCurrentToken().value )
end

--[[
    @instance
    @desc Parses 'token' at the root state (ie: not resolving a name)
    @param <table - token>
]]
function DynamicEqParser:parseRootState( token )
    token = token or self:getCurrentToken()
    if token.type == "NAME" then
        local filter = { "OPERATOR", "DOT", "PAREN" }
        if not self:testAdjacent( filter, filter ) then self:throw("Unexpected name '"..token.value.."'") end

        self:appendToStack( token.value )
        self:setState "name"

        self:appendToOutput( "args["..#self.stacks.."]" )
    elseif token.type == "PAREN" then
        if token.value == "(" then
            if not ( ( self:testForOperator( BIN_AMBIG, false, true ) or self:testAdjacent "PAREN" ) and ( self:testForTerms( false, true ) or self:testForOperator( false, UNA_AMBIG ) ) ) then
                self:throw("Unexpected parentheses '"..token.value.."'")
            end
        elseif token.value == ")" then
            if not ( self:testForTerms( true ) and self:testForOperator( false, BIN_AMBIG, true ) ) then
                self:throw("Unexpected parentheses '"..token.value.."'")
            end
        else self:throw("Invalid parentheses '"..token.value.."'") end

        self:appendToOutput()
    elseif token.type == "STRING" then
        local unaryOffset = self:testForOperator "unary" and 1 or 0
        if not ( ( self:testForOperator( BIN_AMBIG, false, false, unaryOffset ) or self:testAdjacent( "PAREN", false, false, unaryOffset ) ) and ( self:testForOperator( false, BIN_AMBIG, true ) or self:testAdjacent( false, "PAREN" ) ) ) then
            self:throw("Unexpected string '"..token.value.."'")
        end

        self:appendToOutput( ("%s%s%s"):format( token.surroundedBy, token.value, token.surroundedBy ) )
    elseif token.type == "NUMBER" then
        if not self:testAdjacent( { "OPERATOR", "PAREN" }, { "OPERATOR", "PAREN" }, false, false, false ) then
            self:throw("Unexpected number '"..token.value.."'")
        end

        self:appendToOutput()
    elseif token.type == "OPERATOR" then
        if token.unary then
            if not ( self:testForTerms( false, true ) and ( self:testForOperator( BIN_AMBIG ) or self:testAdjacent "PAREN" ) ) then
                self:throw("Unexpected unary operator '"..token.value.."'. Operator must follow a binary operator and precede a term")
            end
        elseif token.binary then
            if not ( self:testForTerms( true ) and ( self:testForOperator( false, "unary" ) or self:testForTerms( false, true ) ) ) then
                self:throw("Unexpected binary operator '"..token.value.."'. Expected terms before and after operator, or unary operator following")
            end
        elseif token.ambiguos then
            local trailing = self:testForTerms( false, true )

            if not ( ( ( trailing or ( self:testForOperator( false, UNA_AMBIG ) and self:testForTerms( true ) ) ) and self:testForTerms( true, false, true ) ) or ( self:testForOperator( BIN_AMBIG ) and trailing ) ) then
                self:throw("Unexpected ambiguos operator '"..token.value.."'")
            end
        else self:throw("Unknown operator '"..token.value.."'") end

        self:appendToOutput( (" %s "):format( token.value ) )
    elseif token.type == "QUERY" then
        self:appendToStack( token.value )
        self:setState "name"

        self:appendToOutput( "args["..#self.stacks.."]" )
    else
        self:throw("Unexpected block '"..token.value.."' of token type '"..token.type.."'.")
    end
end

--[[
    @instance
    @desc Resolves the name by using the token provided. If a 'DOT' is found and a 'NAME' follows, the name is appended to the parser stacks (otherwise, trailing DOT raises exception)

          If no DOT is found, the parser state is reset to 'root'
    @param <table - token>
]]
function DynamicEqParser:parseNameState( token )
    token = token or self:getCurrentToken()
    if token.type == "DOT" then
        local trailing = self:peek()
        if trailing and trailing.type == "NAME" then
            self:stepForward()
            self:appendToStack( trailing.value )
        else
            local last = self:getStack()
            self:throw("Failed to index '" .. table.concat( last, "." ) .. "'. No name following dot.")
        end
    else
        self:setState "root"
        table.insert( self.stacks, {} )

        self:parseRootState( token )
    end
end

--[[
    @instance
    @desc Returns the current stack if no 'offset', otherwise returns the stack using the offset (ie: offset of -1 will return the last stack)
    @param [number - offset]
    @return [table - stack]
]]
function DynamicEqParser:getStack( offset )
    return self.stacks[ #self.stacks + ( offset or 0 ) ]
end

--[[
    @instance
    @desc Appends 'value' to the stack information (current stack is used if no 'stackOffset', otherwise the offset is used to find the stack)
    @param <string - value>, [number - stackOffset]
]]
function DynamicEqParser:appendToStack( value, stackOffset )
    table.insert( self:getStack( stackOffset ), value )
end

--[[
    @setter
    @desc Sets the state of the parser
    @param <string - state>
]]
function DynamicEqParser:setState( state )
    self.state = state
end

--[[
    @instance
    @desc Invokes the correct parser function (:parseRoot or Name state) depending on the parser 'state'

          Token is automatically stepped forward after invoking the parser function.
]]
function DynamicEqParser:parse()
    local token = self:stepForward()
    while token do
        if self.state == "root" then
            self:parseRootState()
        elseif self.state == "name" then
            self:parseNameState()
        else
            self:throw("Invalid parser state '"..self.state.."'")
        end

        token = self:stepForward()
    end
end
