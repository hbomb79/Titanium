local TERMS = { "NAME", "STRING", "NUMBER", "PAREN" }
local BIN_AMBIG = { "binary", "ambiguos" }
local UNA_AMBIG = { "unary", "ambiguos" }

class DynamicEqParser extends Parser {
    state = "root";
    stacks = {{}};
    output = "local args = ...; return ";
}

function DynamicEqParser:__init__( expression )
    self:super( DynamicEqLexer( expression ).tokens )
end

function DynamicEqParser:testForOperator( beforeType, afterType, optional, beforeOffset, afterOffset )
    local pass, before, after = self:testAdjacent( beforeType and "OPERATOR", afterType and "OPERATOR", false, beforeOffset, afterOffset, not optional )
    if not pass then return false end

    local function test( token, filter )
        if not token then return true elseif not filter then return false end
        if type( filter ) == "table" then
            for i = 1, #filter do
                if token[ filter[ i ] ] or filter[ i ] == "*" then return true end
            end
        else
            if type == "*" then return true end
            return token[ filter ]
        end
    end

    local bT, aT = test( before, beforeType ), test( after, afterType )
    if beforeType and afterType then return bT and aT else return ( beforeType and bT ) or ( afterType and aT ) end
end

function DynamicEqParser:testForTerms( pre, post, optional )
    return self:testAdjacent( pre and TERMS, post and TERMS, false, false, false, not optional )
end

function DynamicEqParser:resolveStacks( target )
    local stacks, instances = self.stacks, {}
    for i = 1, #stacks - ( #stacks[ #stacks ] == 0 and 1 or 0 ) do
        local stack = stacks[ i ]
        if #stack <= 1 then
            self:throw("Invalid stack '".. stack[ 1 ] .."'. At least 2 parts must exist to resolve")
        end

        local stackStart, instancePoint = stack[ 1 ]
        if stackStart == "self" then
            instancePoint = target
        elseif stackStart == "parent" then
            instancePoint = target.parent
        elseif stackStart == "application" then
            instancePoint = target.application
        else self:throw("Invalid stack start '"..stackStart.."'. Only self, parent and application allowed") end

        for p = 2, #stack - 1 do
            if not instancePoint then self:throw("Failed to resolve stacks. Index '"..stack[ p ].."' could not be accessed on '"..tostring( instancePoint ).."'") end
            instancePoint = instancePoint[ stack[ p ] ]
        end

        if not instancePoint then self:throw "Invalid instance" elseif not stack[ #stack ] then self:throw "Invalid property" end
        instances[ #instances + 1 ] = { stack[ #stack ], instancePoint }
    end

    return instances
end

function DynamicEqParser:appendToOutput( str )
    self.output = self.output .. ( str or self:getCurrentToken().value )
end

function DynamicEqParser:parseRootState( token )
    token = token or self:getCurrentToken()
    if token.type == "NAME" then
        local filter = { "OPERATOR", "DOT", "PAREN" }
        if not self:testAdjacent( filter, filter ) then self:throw("Unexpected name '"..token.value.."'") end

        self:appendToStack( token.value )
        self:setState "name"

        self:appendToOutput( "args["..#self.stacks.."]" )
    elseif token.type == "PAREN" then
        if token.value == "(" then
            if not ( self:testForOperator( BIN_AMBIG, false, true ) and ( self:testForTerms( false, true ) or self:testForOperator( false, UNA_AMBIG ) ) ) then
                self:throw("Unexpected parentheses '"..token.value.."'")
            end
        elseif token.value == ")" then
            if not ( self:testForTerms( true ) and self:testForOperator( false, BIN_AMBIG, true ) ) then
                self:throw("Unexpected parentheses '"..token.value.."'")
            end
        else self:throw("Invalid parentheses '"..token.value.."'") end

        self:appendToOutput()
    elseif token.type == "STRING" then
        local unaryOffset = self:testForOperator "unary" and 1 or 0
        if not ( ( self:testForOperator( BIN_AMBIG, false, false, unaryOffset ) or self:testAdjacent( "PAREN", false, false, unaryOffset ) ) and ( self:testForOperator( false, BIN_AMBIG, true ) or self:testAdjacent( false, "PAREN" ) ) ) then
            self:throw("Unexpected string '"..token.value.."'")
        end

        self:appendToOutput( ("%s%s%s"):format( token.surroundedBy, token.value, token.surroundedBy ) )
    elseif token.type == "NUMBER" then
        if not self:testAdjacent( { "OPERATOR", "PAREN" }, { "OPERATOR", "PAREN" }, false, false, false ) then
            self:throw("Unexpected number '"..token.value.."'")
        end

        self:appendToOutput()
    elseif token.type == "OPERATOR" then
        if token.unary then
            if not ( self:testForTerms( false, true ) and ( self:testForOperator( BIN_AMBIG ) or self:testAdjacent "PAREN" ) ) then
                self:throw("Unexpected unary operator '"..token.value.."'. Operator must follow a binary operator and precede a term")
            end
        elseif token.binary then
            if not ( self:testForTerms( true ) and ( self:testForOperator( false, "unary" ) or self:testForTerms( false, true ) ) ) then
                self:throw("Unexpected binary operator '"..token.value.."'. Expected terms before and after operator, or unary operator following")
            end
        elseif token.ambiguos then
            local trailing = self:testForTerms( false, true )

            if not ( ( ( trailing or ( self:testForOperator( false, UNA_AMBIG ) and self:testForTerms( true ) ) ) and self:testForTerms( true, false, true ) ) or ( self:testForOperator( BIN_AMBIG ) and trailing ) ) then
                self:throw("Unexpected ambiguos operator '"..token.value.."'")
            end
        else self:throw("Unknown operator '"..token.value.."'") end

        self:appendToOutput( (" %s "):format( token.value ) )
    else
        self:throw("Unexpected block '"..token.value.."' of token type '"..token.type.."'.")
    end
end

function DynamicEqParser:parseNameState( token )
    token = token or self:getCurrentToken()
    if token.type == "DOT" then
        local trailing = self:peek()
        if trailing and trailing.type == "NAME" then
            self:stepForward()
            self:appendToStack( trailing.value )
        else
            local last = self:getStack()
            self:throw("Failed to index '" .. table.concat( last, "." ) .. "'. No name following dot.")
        end
    else
        self:setState "root"
        table.insert( self.stacks, {} )

        self:parseRootState( token )
    end
end

function DynamicEqParser:getStack( offset )
    return self.stacks[ #self.stacks + ( offset or 0 ) ]
end

function DynamicEqParser:appendToStack( value, stackOffset )
    table.insert( self:getStack( stackOffset ), value )
end

function DynamicEqParser:setState( state )
    self.state = state
end

function DynamicEqParser:parse()
    local token = self:stepForward()
    while token do
        if self.state == "root" then
            self:parseRootState()
        elseif self.state == "name" then
            self:parseNameState()
        else
            self:throw("Invalid parser state '"..self.state.."'")
        end

        token = self:stepForward()
    end
end
