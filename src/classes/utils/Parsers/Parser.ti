--[[
    @instance position - number (def. 0) - The current token index being parsed
    @instance tokens - table (def. {}) - The tokens found via lexing, corresponds to 'position'

    The parser class should be extended by classes that are used to parser lexer token output.
]]

abstract class Parser {
    position = 0;
    tokens = {};
}

--[[
    @constructor
    @desc Sets the tokens of the parser to those passed and begins parsing
    @param <table - tokens>
]]
function Parser:__init__( tokens )
    if type( tokens ) ~= "table" then
        return error "Failed to parse. Invalid tokens"
    end

    self.tokens = tokens
    self:parse()
end

--[[
    @instance
    @desc Returns the token at 'position'
]]
function Parser:getCurrentToken()
    return self.tokens[ self.position ]
end

--[[
    @instance
    @desc Returns the token 'amount' ahead of the current position. Defaults to one position ahead
]]
function Parser:peek( amount )
    return self.tokens[ self.position + ( amount or 1 ) ]
end

--[[
    @instance
    @desc Tests the adjacent tokens to see if they are the correct type. Offsets can be provided and missing tokens can be configured to cause test failure
    @param [string - before], [string - after], [boolean - optional], [number - beforeOffset], [number - afterOffset], [boolean - disallowMissing]

    Note: If a token doesn't exist, it will NOT cause the test to fail unless 'disallowMissing' is set to true.
]]
function Parser:testAdjacent( before, after, optional, beforeOffset, afterOffset, disallowMissing )
    local leading, leadingPass, trailing, trailingPass = false, not before, false, not after
    local function test( token, filter )
        if not token then return not disallowMissing end

        if type( filter ) == "table" then
            for i = 1, #filter do
                if token.type == filter[ i ] then return true end
            end
        else return token.type == filter end
    end

    if before then
        leading = self:peek( -1 - ( beforeOffset or 0 ) )
        leadingPass = test( leading, before )
    end


    if after then
        trailing = self:peek( 1 + ( afterOffset or 0 ) )
        trailingPass = test( trailing, after )
    end

    return ( optional and ( trailingPass or leadingPass ) or ( not optional and trailingPass and leadingPass ) ), leading, trailing
end

--[[
    @instance
    @desc Advances 'position' by one and returns the token at the new position
]]
function Parser:stepForward( amount )
    self.position = self.position + ( amount or 1 )
    return self:getCurrentToken()
end

--[[
    @instance
    @desc Throws a error prefixed with information about the token being parsed at the time of error.
]]
function Parser:throw( e, token )
    local token = token or self:getCurrentToken()
    if not token then
        return error( "Parser ("..tostring( self.__type )..") Error: "..e, 2 )
    end

    return error( "Parser ("..tostring( self.__type )..") Error. Line "..token.line..", char "..token.char .. ": "..e, 2 )
end
