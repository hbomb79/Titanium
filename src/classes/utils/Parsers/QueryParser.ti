local function parseValue( val )
    if val == "true" then return true
    elseif val == "false" then return false
    else return tonumber( val ) or tostring( val ) end
end

--[[
    @instance query - table (def. nil) - The parsed query - only holds the query once parsing is complete

    Parses the tokens from QueryLexer into a table containing the query
]]

class QueryParser extends Parser

--[[
    @constructor
    @desc Invokes the Parser constructor, passing the tokens from QueryLexer
    @param <string - queryString>
]]
function QueryParser:__init__( queryString )
    self:super( QueryLexer( queryString ).tokens )
end

--[[
    @instance
    @desc The main parser. Iterates over all tokens generating the table containing the query (stored in self.query)
]]
function QueryParser:parse()
    local allQueries, currentQuery, currentStep = {}, {}, {}

    local nextStepDirect
    local function advanceSection()
        if next( currentStep ) then
            table.insert( currentQuery, currentStep )
            currentStep = { direct = nextStepDirect }

            nextStepDirect = nil
        end
    end

    local token = self:stepForward()
    while token do
        if token.type == "QUERY_TYPEOF" then
            if currentStep.ambiguous then self:throw "Attempted to set query section as 'ambiguous' using typeof operator (~). Already set as ambiguous (trailing ~)" end
            currentStep.ambiguous = true
        elseif token.type == "QUERY_TYPE" then
            if currentStep.type then self:throw( "Attempted to set query type to '"..token.value.."' when already set as '"..currentStep.type.."'" ) end

            currentStep.type = token.value
        elseif token.type == "QUERY_CLASS" then
            if not currentStep.classes then currentStep.classes = {} end

            table.insert( currentStep.classes, token.value )
        elseif token.type == "QUERY_ID" then
            if currentStep.id then self:throw( "Attempted to set query id to '"..token.value.."' when already set as '"..currentStep.id.."'" ) end

            currentStep.id = token.value
        elseif token.type == "QUERY_SEPERATOR" then
            if self.tokens[ self.position + 1 ].type ~= "QUERY_DIRECT_PREFIX" then
                advanceSection()
            end
        elseif token.type == "QUERY_END" then
            advanceSection()

            if next( currentQuery ) then
                table.insert( allQueries, currentQuery )
                currentQuery = {}
            else
                self:throw( "Unexpected '"..token.value.."' found, no left hand query" )
            end
        elseif token.type == "QUERY_COND_OPEN" then
            currentStep.condition = self:parseCondition()
        elseif token.type == "QUERY_DIRECT_PREFIX" and not nextStepDirect then
            nextStepDirect = true
        else
            self:throw( "Unexpected '"..token.value.."' found while parsing query" )
        end

        token = self:stepForward()
    end

    advanceSection()
    if next( currentQuery ) then
        table.insert( allQueries, currentQuery )
    end

    self.query = allQueries
end

--[[
    @instance
    @desc Used to parse conditions inside the query. Called from ':parse'
    @return <table - conditions> - If a valid condition was found
]]
function QueryParser:parseCondition()
    local conditions, condition = {}, {}

    local token = self:stepForward()
    while true do
        if token.type == "QUERY_COND_ENTITY" then
            if condition.symbol then
                if condition.value then
                    self:throw( "Unexpected entity '"..tostring( token.value ).."'. Expected end of condition block, or condition seperator preceding another condition" )
                else
                    condition.value = parseValue( token.value )
                end
            else
                if condition.property then
                    self:throw( "Unexpected entity '"..tostring( token.value ).."'. Expected operator symbol" )
                else
                    condition.property = token.value
                end
            end
        elseif token.type == "QUERY_COND_STRING_ENTITY" and condition.symbol then
            condition.value = token.value
        elseif token.type == "QUERY_COND_MODIFIER" and not condition.property then
            condition.modifier = token.value
        elseif token.type == "QUERY_COND_SYMBOL" and ( condition.property ) then
            if condition.symbol then
                self:throw( "Unexpected symbol '"..tostring( token.value ).."." )
            end

            condition.symbol = token.value
        elseif token.type == "QUERY_COND_SEPERATOR" and next( condition ) then
            if not ( condition.property and condition.value and condition.symbol ) then
                self:throw "No valid condition was found before ',' (Unexpected query condition seperator)"
            end

            conditions[ #conditions + 1 ] = condition
            condition = {}
        elseif token.type == "QUERY_COND_CLOSE" and ( not condition.property or ( condition.property and condition.value and condition.symbol ) ) then
            break
        else
            self:throw( "Unexpected '" .. tostring( token.value ) .. "' (" .. token.type .. ") inside of condition block" )
        end

        token = self:stepForward()
    end

    if next( condition ) then
        conditions[ #conditions + 1 ] = condition
    elseif #conditions == 0 then
        self:throw "Unexpected ']'. No conditions were defined (empty condition block)"
    end

    return #conditions > 0 and conditions or nil
end
