--[[
    @local
    @desc Creates a table of arguments using the classes constructor configuration. This table is then unpacked (and the result returned)
    @param <Class Base - class>, <table - target>
    @return [var - args...]
]]
local function formArguments( class, target )
    local reg = class:getRegistry()
    local constructor, alias, args = reg.constructor, reg.alias, target.arguments
    local req = constructor.requiredArguments or {}
    local returnArguments, trailingTable, dynamics = {}, {}, {}

    if not constructor then return nil end

    if constructor.tmlContent and target.content then
        args[ constructor.tmlContent ] = target.content
    end

    local argumentTypes = constructor.argumentTypes
    local function handleArgument( val, target )
        if type( val ) ~= "string" then
            return false
        end

        local escaped, rest = val:match "^(%%*)%$(.*)$"
        if not escaped or #escaped % 2 ~= 0 then
            return false
        end

        dynamics[ target ] = rest
        return true
    end

    local ordered, set, target = constructor.orderedArguments, {}
    for i = 1, #ordered do
        target = ordered[ i ]
        local argType = argumentTypes[ alias[ target ] or target ]

        local val = args[ target ]
        if val then
            if handleArgument( val, target ) then
                returnArguments[ i ] = argType == "string" and "" or ( ( argType == "number" or argType == "colour" ) and 1 or ( argType == "boolean" ) ) or error "invalid argument type"
            else
                returnArguments[ i ] = XMLParser.convertArgType( val, argType )
            end
        end

        set[ ordered[ i ] ] = true
    end

    for argName, argValue in pairs( args ) do
        if not set[ argName ] then
            if not handleArgument( argValue, argName ) then
                trailingTable[ argName ] = XMLParser.convertArgType( argValue, argumentTypes[ alias[ argName ] or argName ] )
            end
        end
    end

    if next( trailingTable ) then
        returnArguments[ #ordered + 1 ] = trailingTable
    end

    return class( unpack( returnArguments, 1, next(trailingTable) and #ordered + 1 or #ordered ) ), dynamics
end

--[[
    The TML class is used to parse an XML tree into Titanium nodes.
]]

class TML {
    tree = false;
    parent = false;
}

--[[
    @constructor
    @desc Constructs the TML instance by storing the parent and tree on 'self' and then parsing the tree.
    @param <Class Instance - parent>, <table - tree>
]]
function TML:__init__( parent, source )
    self.parent = parent
    self.tree = XMLParser( source ).tree

    self:parseTree()
end

--[[
    @instance
    @desc Parses 'self.tree' by creating and adding node instances to their parents.
]]
function TML:parseTree()
    local queue = { { self.parent, self.tree } }

    local i, toSetup, parent, tree = 1, {}
    while i <= #queue do
        parent, tree = queue[ i ][ 1 ], queue[ i ][ 2 ]

        local target
        for t = 1, #tree do
            target = tree[ t ]

            if parent:can "addTMLObject" then
                local obj, children = parent:addTMLObject( target )
                if obj and children then
                    table.insert( queue, { obj, children } )
                end
            else
                local classArg = target.arguments["class"]
                if classArg then target.arguments["class"] = nil end

                local itemClass = Titanium.getClass( target.type ) or error( "Failed to spawn XML tree. Failed to find class '"..target.type.."'" )
                if not Titanium.typeOf( itemClass, "Node" ) then
                    error("Failed to spawn XML tree. Class '"..target.type.."' is not a valid node")
                end

                local itemInstance, dynamics = formArguments( itemClass, target )
                if classArg then
                    itemInstance.classes = type( itemInstance.classes ) == "table" and itemInstance.classes or {}
                    for className in classArg:gmatch "%S+" do
                        itemInstance.classes[ className ] = true
                    end
                end

                if target.children then
                    table.insert( queue, { itemInstance, target.children } )
                end

                toSetup[ #toSetup + 1 ] = { itemInstance, dynamics }
                if parent:can "addNode" then
                    parent:addNode( itemInstance )
                else
                    return error("Failed to spawn XML tree. "..tostring( parent ).." cannot contain nodes.")
                end
            end
        end

        i = i + 1
    end

    for i = 1, #toSetup do
        local instance = toSetup[ i ][ 1 ]

        for property, expression in pairs( toSetup[ i ][ 2 ] ) do
            instance:setDynamicValue( DynamicValue( instance, property, expression ) )
        end
    end
end

--[[
    @static
    @desc Reads the data from 'path' and creates a TML instance with the contents as the source (arg #2)
    @param <Class Instance - parent>, <string - path>
    @return <TML Instance - instance>
]]
function TML.static.fromFile( parent, path )
    if not Titanium.isInstance( parent ) then
        return error "Expected Titanium instance as first argument (parent)"
    end

    if not fs.exists( path ) then return error( "Path "..tostring( path ).." cannot be found" ) end

    local h = fs.open( path, "r" )
    local content = h.readAll()
    h.close()

    return TML( parent, content )
end
