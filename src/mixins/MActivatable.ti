--[[
    A mixin to reuse code commonly written when developing nodes that can be (de)activated.
]]

abstract class MActivatable {
    active = false;

    activeColour = colours.white;
    activeBackgroundColour = colours.cyan;
}

--[[
    @constructor
    @desc Registers properties used by this class with the theme handler if the object mixes in 'MThemeable'
]]
function MActivatable:MActivatable()
    if Titanium.mixesIn( self, "MThemeable" ) then
        self:register( "active", "activeColour", "activeBackgroundColour" )
    end
end

--[[
    @instance
    @desc Sets the 'active' property to the 'active' argument passed. When the 'active' property changes the node will become 'changed'.
    @param <boolean - active>
]]
function MActivatable:setActive( active )
    local raw = self.raw
    if raw.active == active then return end

    raw.active = active
    self.changed = true
end

configureConstructor {
    argumentTypes = { active = "boolean", activeColour = "colour", activeBackgroundColour = "colour" }
} alias {
    activeColor = "activeColour",
    activeBackgroundColor = "activeBackgroundColour"
}
