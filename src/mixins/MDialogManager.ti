abstract class MDialogManager {
    dialogs = {};
    dialogContainer = false;
}

function MDialogManager:MDialogManager()
    self.dialogContainer = self:addNode( OverlayContainer() ):set {
        id = "application_dialog_overlay",
        visible = "$parent.isDialogOpen",
        enabled = "$self.visible",
        width = "$application.width",
        height = "$application.height",
        consumeWhenDisabled = false,
        Z = 10000
    }
end

function MDialogManager:addDialog( dialogInstance )
    if not Titanium.typeOf( dialogInstance, "Window", true ) then
        return error "Expected 'Window' instance to add dialog box"
    end

    self.dialogContainer:addNode( dialogInstance )
    dialogInstance:on("close", function()
        self.isDialogOpen = #self.dialogContainer.nodes > 0
    end):on("windowFocus", function()
        self:shiftDialogFocus( dialogInstance )
    end)

    self.isDialogOpen = true
end

function MDialogManager:shiftDialogFocus( target )
    local dialogContainerNodes = self.dialogContainer.nodes
    for i = 1, #dialogContainerNodes do
        dialogContainerNodes[ i ].Z = dialogContainerNodes[ i ] == target and #dialogContainerNodes + 1 or i
    end
end

function MDialogManager:removeDialog( dialogInstance )
    if self.dialogContainer then
        self.dialogContainer:removeNode( dialogContainer )

        self.isDialogOpen = #self.dialogContainer.nodes > 0
    end
end

configureConstructor {
    argumentTypes = {
        isDialogOpen = "boolean"
    }
}
