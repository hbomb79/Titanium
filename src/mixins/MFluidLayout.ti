local function max( a, b ) return a > b and a or b end
local function min( a, b ) return a < b and a or b end

--[[
    @instance fluidPositioning - boolean (def. false) - When true this node will resolve fluid positioning (X/Y), using the child nodes position, margin, and alignment properties.
    @instance fluidDimensions - boolean (def. false) - When true this node will change the width and height of the node based on the content inside. The dimensions are limited to (min/max)Width/Height *if* set (if false, the limit is not used).
    @instance minWidth - number (def. 1) - Defines the minimum width that can be set when using fluidDimensions (see fluidDimensions property).
    @instance maxWidth - number (def. false) - Defines the maximum width that can be set when using fluidDimensions (see fluidDimensions property).
    @instance minHeight - number (def. 1) - Defines the minimum height that can be set when using fluidDimensions (see fluidDimensions property).
    @instance maxHeight - number (def. false) - Defines the maximum height that can be set when using fluidDimensions (see fluidDimensions property).

    ****************************************************************************
    **                                                                        **
    **    Features provided by this class should be considered unstable and   **
    **   avoided to ensure reliable execution of Titanium based applications  **
    **                                                                        **
    ****************************************************************************
    * Optimisation is lacking inside this class -- Performance may be impacted *
    ****************************************************************************
]]

abstract class MFluidLayout {
    fluidPositions = false;
    fluidDimensions = false;

    minWidth = 1;
    maxWidth = false;

    minHeight = 1;
    maxHeight = false;

    positionChanged = false;
}

--[[
    @instance
    @desc WIP
]]
function MFluidLayout:resolveFluidPositions()
    local nodes = self.nodes
    local X, Y, rowHeight, prevNodeMarginRight, rowCount, maxRowWidth = 1, 1, 0, 0, 0, 0
    local maxWidth = not self.fluidDimensions and self.width or self.maxWidth

    for i = 1, #nodes do
        local currentNode = nodes[ i ]
        if currentNode.id == "TESTING" then error(tostring( self ) .. " (ID: "..tostring( self.id )..") is resolving", 3) end

        if ( not currentNode.positioning and self.positioning == "fluid" ) or currentNode.positioning == "fluid" then
            if maxWidth and X + currentNode.marginLeft + currentNode.width + 1 > maxWidth then
                maxRowWidth = max( maxRowWidth, X )

                X, Y = 1, Y + rowHeight
                rowHeight, prevNodeMarginRight = 0, 0
                rowCount = rowCount + 1
            end

            currentNode.X = X + currentNode.marginLeft + prevNodeMarginRight
            currentNode.Y = Y + currentNode.marginTop

            prevNodeMarginRight = currentNode.marginRight
            X = currentNode.X + currentNode.width

            rowHeight = max( rowHeight, currentNode.marginTop + currentNode.height + currentNode.marginBottom )
        end
    end

    if self.fluidDimensions then
        local row = Y + rowHeight - 1

        self.width = max( self.minWidth, self.maxWidth and rowCount ~= 0 and min( self.maxWidth, maxRowWidth ) or X - 1 )
        self.height = max( self.minHeight, self.maxHeight and min( self.maxHeight, row ) or row )
    end

    self.positionChanged = false
end

--[[
    @instance
    @desc
]]
function MFluidLayout:setPositionChanged( changed )
    -- self.changed = true
    self.positionChanged = changed

    local nodes = self.collatedNodes
    for i = 1, #nodes do
        nodes[ i ].positionChanged = changed
    end
end

configureConstructor {
    argumentTypes = {
        minWidth = "number",
        minHeight = "number",
        maxWidth = "number",
        maxHeight = "number",
        fluidDimensions = "boolean",
        fluidPositions = "boolean",
        positionChanged = "boolean"
    }
}
