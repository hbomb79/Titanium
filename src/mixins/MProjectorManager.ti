--[[
    @instance projectors - table (def. {}) - The registered projectors

    Manages connected projectors by updating their content automatically, handling registration and removal as well as fetching projectors (by name)
]]
abstract class MProjectorManager {
    projectors = {};
}

--[[
    @instance
    @desc Iterate over every registered projector, updating them to display more relevant information
]]
function MProjectorManager:updateProjectors()
    local ps, p = self.projectors
    for i = 1, #ps do
        p = ps[ i ]
        if p.changed then
            p:updateDisplay()
            p.changed = false
        end
    end
end

--[[
    @instance
    @desc Register the projector instance provided to allow child nodes to utilize it
    @param <Projector Instance - projector>
]]
function MProjectorManager:addProjector( projector )
    local ps = self.projectors
    for i = 1, #ps do
        if ps[ i ].name == projector.name then
            return error( "Failed to register projector instance. Projector name '"..projector.name.."' is already in use" )
        end
    end

    ps[ #ps + 1 ] = projector
    projector.application = self

    if self.focusedNode then
        self.focusedNode:resolveProjectorFocus()
    end
end

--[[
    @instance
    @desc Removes the projector specified
    @param <Projector Instance - projector> - Remove the projector instance provided
    @param <string - name> - Remove the projector instance named 'name'
    @return <boolean - success>, [Projector Instance - removedProjector]
]]
function MProjectorManager:removeProjector( projector )
    local searchName = type( projector ) == "string"

    if not searchName and not Titanium.typeOf( projector, "Projector", true ) then
        return error( "Cannot perform search for projector using target '"..tostring( projector ).."' to remove." )
    end

    local ps, p = self.projectors
    for i = 1, #ps do
        p = ps[ i ]

        if ( searchName and p.name == projector ) or ( not searchName and p == projector ) then
            p.application = false
            table.remove( ps, i )
            return true, p
        end
    end

    return false
end

--[[
    @instance
    @desc Returns the projector named 'name'
    @param <string - name>
    @return <Projector Instance - projector>
]]
function MProjectorManager:getProjector( name )
    local ps = self.projectors
    for i = 1, #ps do
        if ps[ i ].name == name then
            return ps[ i ]
        end
    end
end