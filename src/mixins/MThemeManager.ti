local t = os.clock()
local function themeYield()
    os.queueEvent "themeYield"; os.pullEvent "themeYield";

    t = os.clock()
end

--[[
    The MThemeManager mixin should be used by classes that want to manage objects which are themeable, the main example being the 'Application' class.
]]

abstract class MThemeManager {
    themes = {}
}

--[[
    @instance
    @desc Adds the given theme into this objects `themes` table and re-groups the themes
    @param <Theme Instance - theme>
]]
function MThemeManager:addTheme( theme )
    self:removeTheme( theme )
    table.insert( self.themes, theme )

    self:groupRules()
end

--[[
    @instance
    @desc Removes the given theme from this objects `themes` table. Returns true if a theme was removed, false otherwise.

          Re-groups the themes afterwards
    @param <Instance 'Theme'/string name - target>
    @return <boolean - success>
]]
function MThemeManager:removeTheme( target )
    local searchName = ( type( target ) == "string" and true ) or ( not Titanium.typeOf( target, "Theme", true ) and error "Invalid target to remove" )
    local themes = self.themes
    for i = 1, #themes do
        if ( searchName and themes[ i ].name == target ) or ( not searchName and themes[ i ] == target ) then
            table.remove( themes, i )
            self:groupRules()

            return true
        end
    end
end

--[[
    @instance
    @desc Adds a theme instance named 'name' and imports the file contents from 'location' to this object
    @param <string - name>, <string - location>
]]
function MThemeManager:importTheme( name, location )
    self:addTheme( Theme.fromFile( name, location ) )
end

--[[
    @instance
    @desc Merges all the themes together into one theme, and groups properties by query to avoid running identical queries multiple times.

          Saves grouped rules to 'rules', and calls :dispatchThemeRules
]]
function MThemeManager:groupRules()
    local themes, outputRules = self.themes, {}
    for i = 1, #themes do
        for type, rules in pairs( themes[ i ].rules ) do
            if not outputRules[ type ] then outputRules[ type ] = {} end

            local outputRulesType = outputRules[ type ]
            for query, rules in pairs( rules ) do
                if not outputRulesType[ query ] then outputRulesType[ query ] = {} end

                local outputRulesQuery = outputRulesType[ query ]
                for r = 1, #rules do
                    outputRulesQuery[ #outputRulesQuery + 1 ] = rules[ r ]
                end
            end
        end
    end

    self.rules = outputRules
    self:dispatchThemeRules()
end

--[[
    @instance
    @desc Calls :retrieveThemes on the child nodes, meaning they will re-fetch their rules from the manager after clearing any current ones.
]]
function MThemeManager:dispatchThemeRules()
    local function dispatchAndYield( targets )
        themeYield()
        for i = 1, #targets do
            if os.clock() - t > 8 then themeYield() end

            targets[ i ]:retrieveThemes()
        end
    end

    dispatchAndYield( self.collatedNodes )
    self.dialogContainer:retrieveThemes() -- Pretty sure I need this... Not certain, I'll leave it here for now.
    dispatchAndYield( self.dialogContainer.collatedNodes )
end