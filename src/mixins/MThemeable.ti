--[[
    The MThemeable mixin facilitates the use of themes on objects.
    It allows properties to be registered allowing the object to monitor property changes and apply them correctly.

    The mixin stores all properties set directly on the object in `mainValues`. These values are prioritised over values from themes unless the theme rule is designated as 'important'.

    This mixin no longer handles property links as this functionality has been replaced by a more robust system 'MPropertyManager'.
]]

abstract class MThemeable {
    isUpdating = false;
    hooked = false;

    properties = {};
    classes = {};
    applicableRules = {};

    mainValues = {}; --TODO: Preserve dynamic values, instead of the dynamic value output so that they can be restored fully
    defaultValues = {};
}

--[[
    @instance
    @desc Registers the properties provided. These properties are monitored for changes.
    @param <string - property>, ...
]]
function MThemeable:register( ... )
    if self.hooked then return error "Cannot register new properties while hooked. Unhook the theme handler before registering new properties" end

    local args = { ... }
    for i = 1, #args do
        self.properties[ args[ i ] ] = true
    end
end

--[[
    @instance
    @desc Unregisters properties provided
    @param <string - property>, ...
]]
function MThemeable:unregister( ... )
    if self.hooked then return error "Cannot unregister properties while hooked. Unhook the theme handler before unregistering properties" end

    local args = { ... }
    for i = 1, #args do
        self.properties[ args[ i ] ] = nil
    end
end

--[[
    @instance
    @desc Hooks into the instance by creating watch instructions that inform the mixin of property changes.
]]
function MThemeable:hook()
    if self.hooked then return error "Failed to hook theme handler. Already hooked" end

    for property in pairs( self.properties ) do
        self:watchProperty( property, function( _, __, value )
            if self.isUpdating then return end

            self.mainValues[ property ] = value
            return self:fetchPropertyValue( property )
        end, "THEME_HOOK_" .. self.__ID )

        self[ self.__resolved[ property ] and "mainValues" or "defaultValues" ][ property ] = self[ property ]
    end

    self.hooked = true
end

--[[
    @instance
    @desc Removes the watch instructions originating from this mixin (identified by 'THEME_HOOK_<ID>' name)
]]
function MThemeable:unhook()
    if not self.hooked then return error "Failed to unhook theme handler. Already unhooked" end
    self:unwatchProperty( "*", "THEME_HOOK_" .. self.__ID )

    self.hooked = false
end

function MThemeable:fetchPropertyValue( property )
    local newValue = self.mainValues[ property ]
    local requireImportant = newValue ~= nil

    local rules, r, usedRule = self.applicableRules
    for i = 1, #rules do
        r = rules[ i ]
        if r.property == property and ( not requireImportant or r.important ) then
            newValue = r.value
            usedRule = r

            if r.important then requireImportant = true end
        end
    end

    return newValue, usedRule
end

--[[
    @instance
    @desc Fetches the value from the application by checking themes for valid rules. If a theme value is found it is applied directly (this does trigger the setter)
    @param <string - property>
]]
function MThemeable:updateProperty( property )
    if not self.properties[ property ] then
        return error( "Failed to update property '"..tostring( property ).."'. Property not registered" )
    end

    --TODO: Look into removing old dynamic values when the theme rule is no longer used. Manual dynamicValues need to be distinguished from those created automatically. Ugh.
    local new, rule = self:fetchPropertyValue( property )
    self.isUpdating = true
    if new then
        if rule and rule.isDynamic then
            if self.binds[ property ] then self:unlinkProperties( self, property ) end

            self:dynamicallyLinkProperty( property, new:resolveStacks( self ), new.output )
        else
            self[ property ] = new
        end
    elseif self[ property ] ~= self.mainValues[ property ] then --TODO: Check if this elseif is needed, or if simply else will suffice
        --TODO: Investigate the use of this statement to ensure 'false' main values are not being overriden by the default values
        self[ property ] = self.mainValues[ property ] or self.defaultValues[ property ]
    end

    self.isUpdating = false
end

function MThemeable:queueUpdate()
    self.needsRuleUpdate = true
end

--[[
    @instance
    @desc Updates each registered property
]]
function MThemeable:updateProperties()
    if self.needsRuleUpdate and self.application then
        self.needsRuleUpdate = false
        self.application:cacheApplicableRulesForType( self.__type )
    end

    for property in pairs( self.properties ) do self:updateProperty( property ) end
end

--[[
    @instance
    @desc Adds class 'class' and updated TML properties
    @param <string - class>
]]
function MThemeable:addClass( class )
    self.classes[ class ] = true
    self:queueUpdate()
    self:updateProperties()
end

--[[
    @instance
    @desc Removes class 'class' and updated TML properties
    @param <string - class>
]]
function MThemeable:removeClass( class )
    self.classes[ class ] = nil
    self:queueUpdate()
    self:updateProperties()
end

--[[
    @instance
    @desc Shortcut method to set class if 'has' is truthy or remove it otherwise (updates properties too)
    @param <string - class>, [var - has]
]]
function MThemeable:setClass( class, has )
    self.classes[ class ] = has and true or nil
    self:queueUpdate()
    self:updateProperties()
end

--[[
    @instance
    @desc Returns true if:
          - Param passed is a table and all values inside the table are set as classes on this object
          - Param is string and this object has that class
    @param <string|table - class>
    @return <boolean - has>
]]
function MThemeable:hasClass( t )
    if type( t ) == "string" then
        return self.classes[ t ]
    elseif type( t ) == "table" then
        for i = 1, #t do
            if not self.classes[ t[ i ] ] then
                return false
            end
        end

        return true
    else
        return error("Invalid target '"..tostring( t ).."' for class check")
    end
end

function MThemeable:onThemeUpdate()
    self:updateProperties()
end
